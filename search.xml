<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《c++primer》第七章 类</title>
      <link href="2020/10/23/%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%B8%83%E7%AB%A0-%E7%B1%BB/"/>
      <url>2020/10/23/%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%B8%83%E7%AB%A0-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<ul><li>类的基本思想是<strong>数据抽象</strong>(data abstraction)和<strong>封装</strong>(encapsulation)。</li><li><strong>数据抽象</strong>是一种依赖于<strong>接口</strong>(interface)和<strong>实现</strong>(implementation)分离的编程（以及设计）技术。类的接口包括用户所能做的操作：类的实现则包括类的数据成员、负责接口实现的函数体以及定义类所需的各种私有函数。</li><li><strong>封装</strong>实现了类的接口和实现的分离。封装后的类隐藏了它的实现细节，即类的用户只能使用接口而无法访问实现部分。</li></ul><a id="more"></a><h1 id="定义抽象数据类型"><a href="#定义抽象数据类型" class="headerlink" title="定义抽象数据类型"></a>定义抽象数据类型</h1><h2 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h2><ul><li><p>所有的成员都必须在类内声明，但是成员函数可以定义在类内也可以定义在类外。</p></li><li><p>成员函数可以随意使用类中的其他成员而无需在意这些成员出现的次序。</p></li><li><p>在类外部定义的成员的名字必须包含它所属的类名。</p></li><li><p>成员函数通过一个名为<strong>this</strong>的额外的隐式参数来访问调用它的那个对象。当我们调用一个成员函数时，用请求该函数的对象地址初始化this。例如，如果调用<code>total.isbn();</code> 则编译器负责把total的地址传递给isbn的<strong>隐式形参this</strong>，可以等价认为编译器将该调用重写成如下的形式：<code>Sales_data :: isbn(&amp;total);</code></p></li><li><p>在成员函数内部，可以直接使用调用该函数的对象的成员，而无需通过成员访问运算符来做到这一点，因为this所指的正是这个对象。<strong>任何类成员的直接访问都被看做this的隐式引用</strong>，如当isbn使用bookNo时，它隐式使用this指向的成员，即<code>this-&gt;bookNo;</code></p></li><li><p>this形参是隐式定义的，任何自定义this的参数或变量的行为都是非法的。</p></li><li><p>默认情况下，<strong>this的类型是指向类类型非常量版本的常量指针</strong>。所以不能把this绑定到一个常量对象上，也就使得不能在一个常量对象上调用普通的成员函数。</p></li><li><p>在成员函数的参数列表后加上const，可以修改this指针的类型使其指向常量。这样的成员函数被称作<strong>常量成员函数</strong>(const member function)。</p></li><li><p>常量成员函数不能改变调用它的对象的内容。<strong>常量对象，以及常量对象的引用或指针都只能调用常量成员函数。</strong></p></li><li><p><code>return *this</code>：return语句解引用this指针以获得指向该函数的对象。</p></li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li><p>类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数被称作<strong>构造函数</strong>(constructor)。无论何时只要类的对象被创建就会执行构造函数。</p><ul><li>构造函数的名字和类名相同。</li><li>构造函数没有返回类型。</li><li>构造函数也有一个参数列表（可能为空）和一个函数体（可能为空）。</li><li>构造函数不能被声明为const。当创建类的一个const对象时，直到构造函数完成初始化过程，对象才能真正取得“常量”属性。因此。构造函数在const对象的构造过程中可以向其写值。</li></ul></li><li><p>类通过<strong>默认构造函数</strong>(default constructor)来控制默认初始化过程。默认构造函数无需提供任何实参。</p></li><li><p>如果没有显示地定义默认构造函数，编译器会隐式地创建一个默认构造函数，被称为<strong>合成的默认构造函数</strong>(synthesized constructor)。对于大多数类来说，其将按照如下规则初始化类的数据成员：</p><ul><li>如果存在类内的初始值，用它来初始化成员。</li><li>否则默认初始化该成员。</li></ul></li><li><p><strong>只有当类没有任何构造函数时，编译器才会自动生成默认构造函数。</strong></p></li><li><p><strong>= default</strong>：在参数列表后写上= default来要求编译器生成构造函数，其作用完全等于<strong>合成默认构造函数</strong>。<u>如果=default在类的内部，则默认构造函数是内联的；如果在类的外部，则该成员在默认情况下不是内联的。</u></p></li><li><p><strong>构造函数初始值列表</strong>(constructor initialize list):</p><ul><li><p><code>Sales_data(const std::string &amp;s):bookNo(s){ }</code></p></li><li><p><code>Sales_data(const std::string &amp;s,unsigned n,double p):bookNo(s), units_sold(n), revenue(p*n) { }</code></p></li><li><p>冒号以及冒号和花括号之间的代码被称为构造函数初始值列表。</p></li><li><p>当某个数据成员被构造函数初始值列表忽略时，它将以与默认构造函数相同的方式隐式初始化。</p></li><li><p>构造函数不应该轻易覆盖掉雷内的初始值，除非新赋的值与原值不同。</p></li></ul></li></ul><h2 id="拷贝、赋值和析构"><a href="#拷贝、赋值和析构" class="headerlink" title="拷贝、赋值和析构"></a>拷贝、赋值和析构</h2><ul><li>除了定义类的对象如何初始化之外，类还需要控制拷贝、赋值和销毁对象时发生的行为。</li><li>如果不主动定义这些操作，则编译器将替我们合成它们。</li></ul><h1 id="访问控制与封装"><a href="#访问控制与封装" class="headerlink" title="访问控制与封装"></a>访问控制与封装</h1><ul><li><strong>访问说明符</strong>(access specifiers)：<ul><li>定义在<strong>pubilc</strong>说明符之后的成员在整个程序内可被访问，public成员定义类的接口。</li><li>定义在<strong>private</strong>说明符之后的成员可以被类的成员函数访问，但不能被使用该类的代码访问，private部分封装了类的实现细节。</li></ul></li><li>使用<strong>struct</strong>关键字表示定义在第一个访问符之前的成员都是public，使用<strong>class</strong>关键字，则这些成员是private的。</li></ul><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><ul><li>类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或者函数成为它的<strong>友元</strong>(friend)。</li><li>如果类想把一个函数作为它的友元，只需加一条以<strong>friend</strong>关键字开始的函数声明语句即可。</li><li>友元声明只能出现在类定义的内部，但是在类内出现的具体位置不限。</li><li>友元声明仅仅指定了访问的权限，而非通常意义上的函数声明。必须在类外专门对函数进行一次声明。</li></ul><h1 id="类的其他特性"><a href="#类的其他特性" class="headerlink" title="类的其他特性"></a>类的其他特性</h1><h2 id="类成员再探"><a href="#类成员再探" class="headerlink" title="类成员再探"></a>类成员再探</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">class <span class="title">Screen</span><span class="params">()</span>  <span class="comment">//表示显示器的一个窗口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">     <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos;   <span class="comment">//使用类型别名等价地声明一个类型名字</span></span><br><span class="line">     Screen() = dafault;                   <span class="comment">//因为Screen有另一个构造函数，所以本函数必需</span></span><br><span class="line">     Screen(pos ht, pos wd, <span class="keyword">char</span> c):<span class="built_in">height</span>(ht), <span class="built_in">width</span>(wd), contents(ht * wd, c)&#123;&#125;<span class="comment">//cursor被其类内初始值初始化为0</span></span><br><span class="line">     <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span>                      <span class="comment">//读取光标处的字符</span></span></span><br><span class="line"><span class="function">        </span>&#123;<span class="keyword">return</span> content[<span class="built_in">cursor</span>];&#125;          <span class="comment">//隐式内联</span></span><br><span class="line">     <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">(pos ht, pos wd)</span><span class="keyword">const</span></span>; <span class="comment">//显示内联</span></span><br><span class="line">     <span class="function">Screen &amp;<span class="title">move</span><span class="params">(pos r,pos c)</span></span>;            <span class="comment">//能在之后被设为内联</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">     pos <span class="built_in">cursor</span> = <span class="number">0</span>;                       <span class="comment">//光标的位置</span></span><br><span class="line">     pos <span class="built_in">height</span> = <span class="number">0</span>, <span class="built_in">width</span> = <span class="number">0</span>;            <span class="comment">//屏幕的高和宽</span></span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">string</span> contents;                 <span class="comment">//保存Screen内容</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span>                                     <span class="comment">//在函数的定义处指定inline</span></span><br><span class="line">Screen &amp;Screen::<span class="built_in">move</span>(pos r, pos c)</span><br><span class="line">&#123;</span><br><span class="line">    pos row = r * <span class="built_in">width</span>;</span><br><span class="line">    <span class="built_in">cursor</span> = row + c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> Screen::<span class="built_in">get</span>(pos r, pos c)<span class="keyword">const</span>       <span class="comment">//在类的内部声明成inline</span></span><br><span class="line">&#123;</span><br><span class="line">    pos row = r * <span class="built_in">width</span>;</span><br><span class="line">    <span class="keyword">return</span> contents[row + c];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window_mgr</span>   //一个窗口管理类，表示显示器上的一组<span class="title">Screen</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Screen&gt; screens&#123;Screen(<span class="number">24</span>,<span class="number">80</span>,<span class="string">' '</span>)&#125;;<span class="comment">//默认情况下，一个Window_mgr包含一个标准尺寸的空白Screen</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>类可以自定义某种类型在类中的别名。<strong>用来定义类型的成员必须先定义后使用。</strong></li><li><strong>定义在类内部的成员函数是自动inline的。</strong></li><li>可以在类内把inline作为声明的一部分显示地声明成员函数，也能在类的外部用inline关键字修饰函数的定义。</li><li>成员函数也可以被重载。</li><li><strong>可变数据成员</strong>(mutable data member)：在变量的声明中加入mutable关键字可以是类的某个数据成员即使在一个const成员函数内也能被修改。</li><li>一个可变数据成员永远不会是const。</li><li><u>类内初始值必须使用=的初始化形式（初始化Screen的数据成员时所用）或者花括号括起来的直接初始化形式（初始化screens所用）</u></li><li>初始化类类型的成员时，需要为构造函数转递一个符合成员类型的实参。如上，创建了一个单元素的vector对象。</li></ul><h2 id="返回-this成员函数"><a href="#返回-this成员函数" class="headerlink" title="返回*this成员函数"></a>返回*this成员函数</h2><ul><li><p>若函数返回类型是引用，且返回的是*this，则可以一直调用自身的成员函数。</p></li><li><p><strong>一个const成员函数如果以引用的形式返回*this，则它的返回类型将是常量引用。</strong></p></li><li><p>通过区分成员函数是否是const的，可以对其进行重载。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Screen &amp;<span class="title">display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os)</span></span></span><br><span class="line"><span class="function">                   </span>&#123;do_display(os);<span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Screen &amp;<span class="title">display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os)</span><span class="keyword">const</span></span></span><br><span class="line"><span class="function">                   </span>&#123;do_display(os);<span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">do_display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os)</span><span class="keyword">const</span> </span>&#123;os &lt;&lt; contents;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Screen <span class="title">myScreen</span><span class="params">(<span class="number">5</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> Screen <span class="title">blank</span><span class="params">(<span class="number">5</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">myScreen.<span class="built_in">set</span>(<span class="string">'#'</span>).<span class="built_in">display</span>(<span class="built_in">cout</span>);   <span class="comment">//调用非常量版本</span></span><br><span class="line">blank.<span class="built_in">display</span>(<span class="built_in">cout</span>);               <span class="comment">//调用常量版本</span></span><br></pre></td></tr></table></figure><p>当display调用do_display时，它的this指针隐式地传递给do_display。<u>而当display地非常量版本调用do_display时，它的this指针将隐式地从指向非常量的指针转换成指向常量的指针。</u></p></li></ul><h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><ul><li>每个类定义了唯一的类型。对于两个类来说，即使它们地成员完全一样，这两个类也是不同的类型。</li><li>可以仅仅声明类而暂时不定义它：<code>class Screen;</code>这种声明被称为<strong>前向声明</strong>(forward ddeclaration),在它声明之后定义之前是一个<strong>不完全类型</strong>(incomplete type)。</li><li>不完全类型只能在非常有限的场景下使用：可以定义指向这种类型的指针或引用，也可以声明（但是不能定义）以不完全类型作为参数或返回类型的函数。</li><li>在创建一个类的对象前必须定义该类。</li><li>一个类的成员不能是类自己，然而一旦一个类的名字出现后它就被认为是声明过了，因此类允许包含指向它自身类型的引用或指针。</li></ul><h2 id="友元再探"><a href="#友元再探" class="headerlink" title="友元再探"></a>友元再探</h2><ul><li>如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内所有成员。<code>friend class T;</code></li><li>类可以令另一个类的成员函数作为友元。<code>friend void T::Func( );</code></li><li>一个类如果想把一组重载函数声明成它的友元，它需要对这组函数中的每一个分别声明。</li><li><u>友元函数可以定义在内部，但必须在类外提供相应的声明从而使得该函数可见（可以使用）。</u></li></ul><h1 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h1><ul><li>每个类都会定义它自己的作用域。在类的作用域之外，普通的数据和函数成员只能由对象、引用和指针使用成员运算符来访问。对于类类型成员则使用作用域运算符访问。</li><li>一个类就是一个作用域。</li><li>若定义在类外的成员函数里面使用的类型定义在类内，不必专门说明该类型是在类内定义的。</li><li><u>若定义在类外的成员函数的返回类型定义在类内，则必须指出（ :: ）该类型是哪个类定义了它。</u></li></ul><h2 id="名字查找与类的作用域"><a href="#名字查找与类的作用域" class="headerlink" title="名字查找与类的作用域"></a>名字查找与类的作用域</h2><ul><li><p><strong>名字查找</strong>(name lookup)（寻找与所用名字最匹配的声明的过程）：</p><ul><li>首先，在名字所在的块中寻找其声明语句，只考虑在名字使用之前出现的声明。</li><li>如果没找到，继续查找外层作用域。</li><li>如果最终没有找到匹配的声明，则程序报错。</li></ul></li><li><p>对于定义在类内部的成员函数，类的定义分两步处理：</p><ul><li>首先，编译成员的声明。</li><li>直到类全部可见后才编译函数体。</li></ul><p>编译器处理完类中的全部声明才会处理成员函数的定义。</p></li><li><p>用于类成员声明的名字查找：上面两阶段的处理方式只适用于成员函数中使用的名字。声明中使用的名字，都必须在使用前确保可见。如果某个成员的成员的声明使用了类中尚未出现的名字，则编译器将会定义该类的作用域继续查找。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> Money;</span><br><span class="line"><span class="built_in">string</span> bal;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//编译器现在Account类内寻找Money的声明，因为没有找到，编译器会接着到外层作用域查找</span></span><br><span class="line">    <span class="function">Money <span class="title">balance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> bal; &#125;<span class="comment">//返回的是名为bal的成员，而非外层作用域的string对象</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">typedef</span> duble Money;           <span class="comment">//错误：不能重复定义Money</span></span><br><span class="line">    Money bal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类的内层作用域可以重新定义外层作用域中的名字，即使该名字已经在内层作用域使用过。但是，<u>如果成员使用了外层作用域中的某个名字，而该名字代表一种类型，则类不能在之后重新定义该名字。</u></p></li><li><p>成员定义中的普通块作用域的名字查找：成员函数中使用的名字按照如下方式解析：</p><ol><li>首先，在成员函数内查找该名字的声明。和前面一样，只有在函数使用前出现的声明才被考虑。</li><li>如果在成员函数内没有找到，则在类内继续查找，这时类的所有成员都可以被考虑。</li><li>如果类内也没找到该名字的声明，在成员函数定义之前的作用域内继续查找。</li></ol></li><li><p>类作用域之后，在外层作用域中查找。</p></li><li><p>如果外层作用域的对象被隐藏了，可以显示地通过作用域运算符来进行请求。</p></li><li><p>在成员定义在类的外部时，名字查找的第三步不仅要考虑类定义之前的全局作用域中的声明，还要考虑在成员函数定义前的全局作用域的声明。</p></li></ul><h1 id="构造函数再探"><a href="#构造函数再探" class="headerlink" title="构造函数再探"></a>构造函数再探</h1><h2 id="构造函数初始值列表"><a href="#构造函数初始值列表" class="headerlink" title="构造函数初始值列表"></a>构造函数初始值列表</h2><ul><li><p>如果没有在构造函数的初始值列表中显示地初始化成员，则该成员将在构造函数体之前执行默认初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sale_data::Sales_data(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s,<span class="keyword">unsigned</span> cnt,<span class="keyword">double</span> price)</span><br><span class="line"><span class="comment">//Sales_data构造函数地一种写法,没有使用构造函数初始值；和之前的原始定义相同，当构造函数完成后，数据成员的值相同</span></span><br><span class="line">&#123;</span><br><span class="line">  bookNo = s;</span><br><span class="line">  units_sold = cnt;</span><br><span class="line">  revenue = cnt * price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果成员时const或引用，或者属于某种未提供默认构造函数的类类型，必须初始化。</p></li><li><p>成员初始化的顺序和它们在类定义中的出现顺序一致。</p></li><li><p>构造函数也可以使用<code>默认实参</code>，如果 一个函数为所有参数都提供了默认实参，则它实际上也定义了<code>默认构造函数</code>。</p></li></ul><h2 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a>委托构造函数</h2><ul><li><p><strong>委托构造函数</strong>(delegating constructor)使用它所属类的其他构造函数执行它自己的初始化过程，或者说它把它自己的一些（或全部）职责委托给了其他构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">pubilc:</span><br><span class="line">  <span class="comment">//非委托构造函数使用对应的实参初始化成员</span></span><br><span class="line">  Sales_data(<span class="built_in">std</span>::<span class="built_in">string</span> s,<span class="keyword">unsigned</span> cnt,<span class="keyword">double</span> price):</span><br><span class="line">            bookNo(s),units_sold(cnt),revenue(cnt*price) &#123; &#125;</span><br><span class="line">  <span class="comment">//其余构造函数全部委托给另一个构造函数</span></span><br><span class="line">  Sales_data(): Sales_data(<span class="string">" "</span>,<span class="number">0</span>,<span class="number">0</span>)&#123; &#125;</span><br><span class="line">  Sales_data(<span class="built_in">std</span>::<span class="built_in">string</span> s):Sales_data(s,<span class="number">0</span>,<span class="number">0</span>)&#123; &#125;</span><br><span class="line">  Sales_data(<span class="built_in">std</span>::istream &amp;is): Sale_data() </span><br><span class="line">             &#123;<span class="built_in">read</span>(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>当一个构造函数委托给另一个构造函数的时，受委托的构造函数的初始值列表和函数体被依次执行，然后控制权才会交还给委托者的函数体。</p></li></ul><h2 id="默认构造函数的作用"><a href="#默认构造函数的作用" class="headerlink" title="默认构造函数的作用"></a>默认构造函数的作用</h2><ul><li>当对象被默认初始化或值初始化时自动执行默认构造函数。<code>默认初始化</code>在以下情况下发生：<ul><li>当我们在块作用域内不使用任何初始化定义一个非静态变量或者数组时。</li><li>当一个类本身含有类类型的成员且使用合成的默认构造函数时。</li><li>当类类型的成员没有在构造函数初始值列表中显示地初始化时。</li></ul></li><li><code>值初始化</code>在以下情况下发生：<ul><li>在数组初始化地过程中如果我们提供的初始值数量少于数组的大小时。</li><li>当我们不使用初始值定义一个局部静态变量时。</li><li>当我们通过书写形如 T（ ）的表达式显示地请求值初始化时，其中T是类型名。</li></ul></li></ul><h2 id="隐式的类类型转换"><a href="#隐式的类类型转换" class="headerlink" title="隐式的类类型转换"></a>隐式的类类型转换</h2><ul><li><p>如果构造函数只接受一个实参，则它实际上定义了<code>转换为此类类型的隐式转换机制</code>，有时称这种函数为<strong>转换构造函数</strong>(converting constructor)。</p></li><li><p>编译器只会自动执行一步类型转换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> null_book = <span class="string">"9-999-9999-9"</span>;</span><br><span class="line"><span class="comment">//构造一个临时的Sale_data对象</span></span><br><span class="line"><span class="comment">//该对象的units_sold和revenue等于0，bookNo等于null_book</span></span><br><span class="line">item.combine(null_book);  <span class="comment">//使用string实参调用Sales_data的combine成员</span></span><br></pre></td></tr></table></figure></li><li><p>在要求隐式转换的程序上下文中，可以通过将构造函数声明为<strong>explicit</strong>加以阻止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sale_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">  Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):</span><br><span class="line">             bookNo(s), units_sold(n), revenue(p*n) &#123; &#125;</span><br><span class="line">  explicit Sales_data(const std::string &amp;s):bookNo(s) &#123; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Sales_data</span><span class="params">(<span class="built_in">std</span>::istream&amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">item.combine(null_book);    <span class="comment">//错误：string构造函数时explicit的</span></span><br><span class="line">item.combine(<span class="built_in">cin</span>);          <span class="comment">//错误：istream构造函数是explicit的</span></span><br></pre></td></tr></table></figure></li><li><p>explicit只对一个实参的构造函数有效，只允许在类内声明构造函数时使用。</p></li><li><p>explicit构造函数只能用于<code>直接初始化</code>（调用构造函数）不能用于<code>拷贝初始化</code>。而且编译器将不会在自动转换过程中使用该构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data <span class="title">item1</span><span class="params">(null_book)</span></span>;  <span class="comment">//正确：直接初始化（显示调用构造函数）</span></span><br><span class="line">Sales_data item2 = null_book; <span class="comment">//错误：不能将explicit构造函数用于拷贝形式的初始化过程</span></span><br></pre></td></tr></table></figure></li><li><p>为转换显示地使用构造函数：尽管编译器不会将explicit的构造函数用于隐式转换过程，但是可以使用这样的构造函数显示地强制进行转换：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item.combine(Sales_data(null_book));  <span class="comment">//正确：实参是一个显示构造的Sales_data对象</span></span><br><span class="line">item.combine(<span class="keyword">static_cast</span>&lt;Sales_data&gt;(<span class="built_in">cin</span>));<span class="comment">//正确：static_cast可以使用explcit的构造函数</span></span><br></pre></td></tr></table></figure></li><li><p>标准库中含有显示构造函数的类：</p><ul><li>接受一个单参数的const char*的string构造函数不是explicit的。</li><li>接受一个容量 参数的vector构造函数时explicit的。</li></ul></li></ul><h2 id="聚合类"><a href="#聚合类" class="headerlink" title="聚合类"></a>聚合类</h2><ul><li><strong>聚合类</strong>(aggregate class)使得用户可以直接访问其成员，并且具有特殊的初始化语法形式。</li><li>聚合类的特征：<ul><li>所有成员都是public。</li><li>没有定义任何构造函数。</li><li>没有类内初始值。</li><li>没有基类，也没有virtual函数。</li></ul></li><li>可以提供一个花括号括起来的成员初始值列表，用它来初始化聚合类的数据成员，且初始值的顺序一致。</li><li>与初始化数组元素的规则一样，如果初始值列表中的元素个数少于类的成员数量，则靠后的成员被<code>值初始化</code>。</li><li>显式初始化类的对象的成员存在三个明显的缺点：<ul><li>类的所有成员都是public。</li><li>这样的初始化过程冗长乏味且容易出错。</li><li>添加或删除一个成员之后，所有的初始化语句都需要更新。</li></ul></li></ul><h2 id="字面值常量类"><a href="#字面值常量类" class="headerlink" title="字面值常量类"></a>字面值常量类</h2><ul><li><p>字面值类型的类可能含有constexpr函数成员。这样的成员必须符合constxpr函数的所有要求，它们是隐式const的。</p></li><li><p>数据成员都是<code>字面值类型</code>的<code>聚合类</code>是<code>字面值常量类</code>。</p></li><li><p>如果一个类不是聚合类，但它符合下述要求，则它也是一个聚合类：</p><ul><li>数据成员都必须是<code>字面值类型</code>。</li><li>类必须至少含有一个constexpr构造函数。</li><li>如果一个数据成员含有类内初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的constexpr构造函数。</li><li>类必须使用析构函数的默认定义，该成员负责销毁类的对象。</li></ul></li><li><p>constexpr构造函数：一个字面值常量类必须至少提供一个constexpr构造函数。</p></li><li><p>constexpr构造函数函数体一般为空。通过前置关键字constexpr就可以声明一个constexpr构造函数。</p></li><li><p>constexpr构造函数必须初始化所有数据成员，初始值或者使用constexpr构造函数，或者是一条常量表达式。</p></li><li><p>constexpr构造函数用于生成<code>constexpr对象</code>及constexpr函数的参数或返回类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  constexpr Debug(bool b = true): hw(b), io(b), other(b) &#123; &#125;</span><br><span class="line">  constexpr Debug(bool h, bool i, bool o): hw(h), io(i), other(o) &#123; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="title">any</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> hw || io || other; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_io</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; io = b; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_hw</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; hw = b; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_other</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123;hw = b; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">bool</span> hw;</span><br><span class="line">  <span class="keyword">bool</span> io;</span><br><span class="line">  <span class="keyword">bool</span> other;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Debug <span class="title">io_sub</span><span class="params">(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span></span>; </span><br><span class="line"><span class="keyword">if</span> (io_sub.any())</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"print appropriate error messages"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Debug <span class="title">prod</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (prod.any())</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"print an error message"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h1><p>声明静态成员：</p><ul><li><p>通过在成员的生命前加上关键字<code>static</code>使得其与类关联在一起。</p></li><li><p>类的静态成员存在于任何对象之外，对象中不包括任何与静态数据成员有关的数据。</p></li><li><p>静态成员函数不与任何对象绑定在一起，它们不包括this指针。静态成员函数不能声明成const的，也不能在static函数体内使用this指针。这一限制即适用于this的显示使用，也对调用非静态成员的隐式使用有效。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123; amount += amount * interestRate; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> interestRate; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rate</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> owner;</span><br><span class="line">  <span class="keyword">double</span> amount;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">double</span> interestRate;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">initTate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>使用类的静态成员：</p><ul><li><p>可以使用作用域运算符直接访问静态成员。</p><p><code>double r = Account::rate();</code></p></li><li><p>类的静态成员不属于类的某个对象，但可以使用类的对象、引用或指针来访问静态成员。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Account ac1;</span><br><span class="line">Account *ac2 = &amp;ac1;</span><br><span class="line">r = ac1.rate();             <span class="comment">//通过Account的对象或引用</span></span><br><span class="line">r = ac2-&gt;rate();            <span class="comment">//通过指向Account对象的指针</span></span><br></pre></td></tr></table></figure></li><li><p>成员函数不用通过作用域运算符就能直接使用静态成员。</p></li></ul><p>定义静态成员：</p><ul><li>可以在类的内部也可以在外部定义静态成员函数。<code>static关键字</code>只能出现在<code>类内部的声明语句</code>中。</li><li>静态数据成员不属于类的任何一个对象，所以不是在创建类的对象时被定义的，它们不是由类的构造函数初始化的。</li><li>不能在类的内部初始化静态成员，必须在类的外部定义和初始化每个静态成员，且<code>只能被定义一次</code>。</li><li>类似于全局变量，静态数据成员定义在任何函数之外。一旦被定义就将一直存在于程序的整个生命周期内。</li><li>定义并初始化一个静态成员：<code>double Account::interestRate = initRate();</code></li></ul><p>静态成员的类内初始化：</p><ul><li><p>通常情况下类的静态成员不应该在类内初始化。但可以为静态成员提供const整数类型的类内初始值，不过要求静态成员必须是<code>字面值常量类型的constexpr==</code>初始值必须是常量表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> interestRate; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rate</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> period = <span class="number">30</span>;     <span class="comment">//period是常量表达式</span></span><br><span class="line">  <span class="keyword">double</span> daily_tbl[preid];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> Account::period;</span><br></pre></td></tr></table></figure></li><li><p>如果在类的内部提供了一个初始值，则成员的定义不能再指定一个初始值了。</p></li><li><p>即使一个常量静态数据成员在类内被初始化了，通常情况下也应该在类的外部定义一下该成员。</p></li></ul><p>静态成员能应用于某些场景，而普通成员不能：</p><ul><li><p>静态数据成员可以是<code>不完全类型</code>。特别的，<code>静态数据成员的类型可以就是它所属的类类型</code>，而非静态数据成员只能声明成它所属的类的指针或引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> Bar mem1;  <span class="comment">//正确：静态成员可以是不完全类型</span></span><br><span class="line">  Bar *mem2;        <span class="comment">//正确：指针成员可以是不完全类型</span></span><br><span class="line">  Bar mem3;         <span class="comment">//错误：数据成员必须是完全类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以使用静态成员作为默认实参。非静态数据成员不能作为默认实参，因为它的值本身属于对象的一部分。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Screen&amp; <span class="title">clear</span><span class="params">(<span class="keyword">char</span> = bkground)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> bkground;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 《c++primer》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《c++primer》第六章 函数</title>
      <link href="2020/10/22/%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%87%BD%E6%95%B0/"/>
      <url>2020/10/22/%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><ul><li>一个典型的函数(function)定义包括：<strong>返回部分</strong>(return type)、<strong>函数名字</strong>、<strong>由0个或多个形参(parameter)组成的列表</strong>以及<strong>函数体</strong>(function body)。</li><li>通过<strong>调用运算符</strong>(call operator)来执行函数。调用运算符的形式是一对圆括号，他作用于一个表达式，<u>该表达式是函数或指向函数的指针</u>；圆括号内是一个用逗号隔开的<strong>实参(argument)列表</strong>，用实参初始化函数的形参。</li><li>函数的返回类型不能是数组或函数，但可以是指向数组或函数的指针。</li></ul><a id="more"></a><h2 id="局部对象"><a href="#局部对象" class="headerlink" title="局部对象"></a>局部对象</h2><ul><li>在C++语言中，名字有作用域，对象有<strong>生命周期</strong>(lifetime)。<ul><li>名字的作用域 时程序文本的一部分，名字在其中可见。</li><li>对象的生命周期是程序执行过程中该对象存在的一段时间。</li></ul></li><li>形参和函数体内部定义的变量统称为<strong>局部变量</strong>(local variable)，仅在函数的作用域内可见，同时局部变量还会<strong>隐藏</strong>(hide)在外层作用域中同名的其他所有声明中。</li><li>在函数体之外定义的对象存在于程序的整个执行过程中。此类对象在程序启动时被创建，直到程序结束时才会销毁。局部变量的生命周期依赖于定义的方式。</li><li>对于普通局部变量对应的对象来说，当函数的控制路径经过变量定义语句时创建该对象，当到达定义所在的块末尾时销毁它。我们把只存在于块执行期间的对象称为<strong>自动对象</strong>(automatic object)。当块的执行结束后，块中创建的自动对象的值就变成未定义的了。</li><li>形参是一种自动对象。</li><li>内置类型的未初始化局部变量将产生未定义的值。</li><li><strong>局部静态变量</strong>(local static object)在程序的执行路径第一次经过对象定义语句时初始化，并且直到程序中止才被销毁，在此期间即使对象所在的函数结束执行也不会对它有影响。</li><li><u>如果局部静态变量没有显示的初始值，它将执行值初始化，内置类型的局部静态变量初始化为0。</u></li></ul><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><ul><li>函数声明也称作<strong>函数原型</strong>(function prototype)，和函数的定义非常类似，唯一的区别是函数声明无需函数体，用一个分号代替。</li><li>函数只能定义一次，但可以多次声明。</li></ul><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><ul><li>形参的类型决定了形参和实参交互的方式。如果形参是引用类型，它将绑定到对应的实参上；否则将实参的值拷贝后赋给形参。</li><li>当形参是引用类型时，我们说它对应的实参被<strong>引用传递(</strong>passed by reference)或者函数被<strong>传引用调用</strong>。引用形参是它对应实参的别名。</li><li>当实参的值被拷贝给形参时，形参和实参是两个相互独立的对象。我们说这样的实参被<strong>值传递</strong>(passed by value)或者函数被<strong>传值调用</strong>(called by value)。</li></ul><h2 id="传值参数"><a href="#传值参数" class="headerlink" title="传值参数"></a>传值参数</h2><ul><li>函数对形参做的所有操作都不会影响实参。</li><li>当形参是指针时，可以改变指针所指对象的值，但无法改变实参的值。</li></ul><h2 id="传引用参数"><a href="#传引用参数" class="headerlink" title="传引用参数"></a>传引用参数</h2><ul><li>通过使用引用形参，允许函数改变一个或多个实参的值。</li><li>拷贝大的类类型对象或者容器对象比较低效，甚至有的类类型不支持拷贝操作，这时函数应使用引用形参访问该类型的对象。</li><li>给函数传入额外的引用实参，可以使函数返回额外信息。</li></ul><h2 id="const形参和实参"><a href="#const形参和实参" class="headerlink" title="const形参和实参"></a>const形参和实参</h2><ul><li><u>和其他初始化过程一样，当用实参初始化形参时会忽略掉顶层const。当形参有顶层const时，传给它常量对象和非常量对象都可以。</u></li><li><strong>可以使用非常量初始化一个底层const对象，但反过来不行。同时一个普通的引用必须用同类型的对象初始化。</strong></li><li>尽量使用常量引用。</li></ul><h2 id="数组形参"><a href="#数组形参" class="headerlink" title="数组形参"></a>数组形参</h2><ul><li><p>数组的两个特殊性质（不允许拷贝数组以及使用数组时会将其转换成指针）对我们定义和使用作用在数组上的函数有影响。</p></li><li><p>尽管不能以值传递的方式传递数组，我们仍可以把形参写成类似数组的形式。数组的大小对函数的调用没有影响。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尽管形式不同，这三个print函数都是等价的</span></span><br><span class="line"><span class="comment">//每个函数都有一个const int*类型的形参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>[<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>因为数组是以指针形式传递给函数的，所以一开始函数并不知道数组的确切大小，调用者应该为此提供一些额外的信息。管理指针形参有三种常用的技术：</p><ul><li><p><u>使用标记指定数组长度：要求数组本身包含一个结束标记。</u>使用这种方法的典型就是C风格字符串，它储存在字符数组中，并且在最后一个字符后面跟着一个空字符，函数在处理时遇到空字符停止。此方法适用于有明显结束标记且该标记不会与普通数据混淆的情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*cp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(cp)                <span class="comment">//若cp不是一个空指针</span></span><br><span class="line">    <span class="keyword">while</span>(*cp)          <span class="comment">//只要指针所指的字符不是空字符</span></span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; *p++;     <span class="comment">//输出当前字符并将指针向前移动一个位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><u>使用标准库规范：传递指向数组首元素和尾后元素的指针。</u></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *beg, <span class="keyword">const</span> <span class="keyword">int</span> *<span class="built_in">end</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(beg != <span class="built_in">end</span>)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; *beg++ &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">begin</span>(arr), <span class="built_in">end</span>(arr));</span><br></pre></td></tr></table></figure></li><li><p><u>显示传递一个表示数组大小的形参：专门定义一个表示数组大小的形参</u>，在C程序和过去的C++程序中常常使用这种方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> ia[],<span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i != <span class="built_in">size</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ia[i] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(j, <span class="built_in">end</span>(j) - <span class="built_in">begin</span>(j));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组引用形参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> (&amp;arr)[<span class="number">10</span>])</span><span class="comment">//arr两端的括号没有的话，表示的是含有10个引用的数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> elem : arr)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; elem &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只能将函数作用于含有10个整数的数组</span></span><br></pre></td></tr></table></figure></li><li><p>传递多维数组：<code>void print(int (*matrix)[10], int rowsize);</code>或<code>void print(int matrix[] [10], int rowsize);</code></p></li></ul><h2 id="main：处理命令行选项"><a href="#main：处理命令行选项" class="headerlink" title="main：处理命令行选项"></a>main：处理命令行选项</h2><ul><li><p>可以给main传递实参，在命令行运行时传递给main函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main函数的两种定义形式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;...&#125;<span class="comment">//argc表示数组中字符串的数量，argv时指向C风格字符串的指针的数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **grav)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>   <span class="title">main</span><span class="params">(<span class="keyword">int</span>   argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"argc=   "</span> &lt;&lt; argc &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"argv["</span> &lt;&lt; i &lt;&lt; <span class="string">"]="</span> &lt;&lt; argv[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>   <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*假定该main函数位于文件D:\test\test1\Debug\test1.exe，在命令行输入D:\test\test1\Debug\test1.exe this is my code；输出结果为：</span></span><br><span class="line"><span class="comment">argc=   5</span></span><br><span class="line"><span class="comment">argv[0]=D:\test\test1\Debug\test1.exe</span></span><br><span class="line"><span class="comment">argv[1]=this</span></span><br><span class="line"><span class="comment">argv[2]=is</span></span><br><span class="line"><span class="comment">argv[3]=my</span></span><br><span class="line"><span class="comment">argv[4]=code*/</span></span><br></pre></td></tr></table></figure></li><li><p>可选的实参从argv[1]开始，argv[0]保存程序的名字，而非用户输入。</p></li></ul><h2 id="含有可变形参和函数"><a href="#含有可变形参和函数" class="headerlink" title="含有可变形参和函数"></a>含有可变形参和函数</h2><ul><li><p>为了能编写能处理不同数量实参的函数，C++11新标准提供了两种主要的方法：如果所有的实参类型相同，可以传递一个名为<strong>initializer_list</strong>的标准库类型；如果实参的类型不同，可以编写<strong>可变参数模板</strong>。 此外，还有一种特殊的形参类型（即<strong>省略符</strong>），可以用它传递可变数量的实参。</p></li><li><p>initializer_list提供的操作（定义在同名的头文件中）：</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>initializer_list<T> lst</td><td>默认初始化</td></tr><tr><td>initializer_list<T> lst{a,b,c…}</td><td>lst的元素数量和初始值一样多；lst的元素是对应初始值的副本；列表中元素是const</td></tr><tr><td>lst2(lst) / lst2 = lst</td><td>拷贝或赋值一个initializer_list对象不会拷贝列表中的元素；拷贝后原始列表和副本共享元素</td></tr><tr><td>lst.size()</td><td>列表中的元素数量</td></tr><tr><td>lst.begin()</td><td>返回指向lst中首元素的指针</td></tr><tr><td>lst.end()</td><td>返回指向lst中尾元素下一位置的指针</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">error_msg</span><span class="params">(<span class="built_in">initializer_list</span>&lt;<span class="built_in">string</span>&gt; il)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> beg = il.<span class="built_in">begin</span>(); beg != il.<span class="built_in">end</span>(); ++beg)</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; *beg &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>和vector一样，initializer_list是一种模板类型，但是它的对象中的元素永远是常量值，无法改变其中元素的值。</p></li><li><p>省略符形参是为了便于C++程序访问某些特殊的C代码而设置的，这些代码使用了名为<strong>varargs</strong>的C标准库功能。</p></li><li><p>省略符形参仅仅用于C和C++通用的类型，大多数类类型的对象在传递给省略符形参时都无法正确拷贝。</p></li><li><p>省略符形参只能出现在形参列表的最后一个位置，有两种形式：<code>void foo(parm_list, ...);</code>    /    <code>void foo(...);</code></p></li></ul><h1 id="返回类型和return语句"><a href="#返回类型和return语句" class="headerlink" title="返回类型和return语句"></a>返回类型和return语句</h1><ul><li>return语句终止当前正在执行的函数并将控制权返回到调用该函数的地方。</li><li>return语句有两种形式：<code>return;</code>      /      <code>return expression;</code></li></ul><h2 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h2><ul><li>没有返回值的函数只能用在返回类型是void的函数中。返回void的函数不要求非得有return语句，因为在这类函数的最后一句后面会隐式地执行return。</li><li>void函数想要在它的中间位置提前退出，可以使用return语句。</li></ul><h2 id="有返回值函数"><a href="#有返回值函数" class="headerlink" title="有返回值函数"></a>有返回值函数</h2><ul><li><p>return语句返回值的类型必须与函数的返回类型相同，或者能隐式转换成函数的返回类型。</p></li><li><p><u>返回一个值的方式和初始化一个变量和形参的方式完全一样：返回的值用于初始化调用点的一个临时量，该临时量就是函数调用的结果。</u></p></li><li><p>若返回值非引用，则被拷贝到调用点。若返回值是引用，则它仅是它所引对象的别名。</p></li><li><h5 id="不要返回局部变量的引用和指针：函数终止意味着局部变量的引用将指向不再有效的内存区域。"><a href="#不要返回局部变量的引用和指针：函数终止意味着局部变量的引用将指向不再有效的内存区域。" class="headerlink" title="不要返回局部变量的引用和指针：函数终止意味着局部变量的引用将指向不再有效的内存区域。"></a><u><strong>不要返回局部变量的引用和指针</strong></u>：函数终止意味着局部变量的引用将指向不再有效的内存区域。</h5></li><li><p>*<u><strong>调用一个返回引用的函数返回左值，其他返回类型得到右值。</strong></u>*</p></li><li><p>列表初始化返回值：C++11新标准规定，函数可以返回花括号包围的值的列表。类似于其他返回结果，此处的列表也用来对表示函数返回的临时量初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">process</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//excepted和actual是string对象</span></span><br><span class="line">  <span class="keyword">if</span>(expected.empty())</span><br><span class="line">    <span class="keyword">return</span>&#123;&#125;;                      <span class="comment">//返回一个空的vector对象</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (expected == actual)</span><br><span class="line">    <span class="keyword">return</span>&#123;<span class="string">"functionX"</span>,<span class="string">"Okay"</span>&#125;;    <span class="comment">//返回列表初始化的vector对象</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span>&#123;<span class="string">"functionX"</span>,expected,actual&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果列表为空，临时量执行<strong>值初始化</strong>；否则返回的值由函数的返回类型决定。</li><li>如果函数返回的是内置类型，则花括号包围的列表最多包含一个值，而且该值所占空间不应该大于目标类型的空间。</li><li>如果函数返回的是类类型，由类本身定义初始值如何使用。</li></ul></li><li><p>main函数如果没有return语句，则编译器会隐式地插入一条返回0的return语句。</p></li><li><p>一个函数调用了它自身，不管是直接地还是间接地，都称该函数为<strong>递归函数</strong>(recursive function)。</p></li></ul><h2 id="返回数组指针"><a href="#返回数组指针" class="headerlink" title="返回数组指针"></a>返回数组指针</h2><ul><li><p>函数不能返回数组因为数组不能被拷贝，但函数可以返回数组的指针或引用。</p></li><li><p>可以使用<strong>类型别名</strong>简化定义一个返回数组的指针或引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> arrT[<span class="number">10</span>];    <span class="comment">//arrT是一个类型别名，它表示的类型是含有10个整数的数组</span></span><br><span class="line"><span class="keyword">using</span> arrT = <span class="keyword">int</span>[<span class="number">10</span>];    <span class="comment">//同上</span></span><br><span class="line"><span class="function">arrT* <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span>;       <span class="comment">//func返回一个指向含有10个整数的数组的指针</span></span><br></pre></td></tr></table></figure></li><li><p>声明一个返回数组指针的函数：</p><ul><li><p>数组的声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];            <span class="comment">//arr是含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> *p1[<span class="number">10</span>];            <span class="comment">//p1是一个含有10个指针的数组</span></span><br><span class="line"><span class="keyword">int</span> (*p2)[<span class="number">10</span>] = &amp;arr;   <span class="comment">//p2是一个指针，它指向含有10个整数的数组</span></span><br></pre></td></tr></table></figure></li><li><p>和上面的声明一样，要定义一个返回数组指针的函数，则数组的维度必须跟在函数名字之后。然而函数的形参列表也跟在函数名字后面且先于数组的维度：<code>Type (*function(parameter_list)) [dimension];</code>，例如：<code>int (*func(int i)) [10];</code>。最外面的括号不能省略。</p></li></ul></li><li><p>使用<strong>尾置返回类型</strong>(trailing return type)：<code>auto func(int i) -&gt; int(*)[10];   //func接受一个int类型实参，返回一个指针，该指针指向含有10个整数的数组</code>。</p></li><li><p>如果直到函数返回的指针指向的是哪个数组，就可以使用<strong>decltype</strong>关键字声明返回类型。<u>decltype的结果是数组，要向表示指向数组的指针必须在函数声明时加上一个*符号。</u></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> odd[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> even[] = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">decltype</span>(odd) *arrPtr(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (i%<span class="number">2</span>)? &amp;odd : &amp;even;  <span class="comment">//返回一个指向数组的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><ul><li><p>如果同一个作用域内的几个函数名字相同但形参列表不同，即为<strong>重载(overloaded)函数</strong>。</p></li><li><p><strong><u>一个拥有顶层const的形参无法和另一个没有顶层const的形参区分开。</u></strong></p></li><li><p>如果形参是指针或引用，则通过区分其指的是常量对象还是非常量对象可以实现函数重载，此时const是底层的。</p></li><li><p>const_cast和重载：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较两个string对象的长度，返回较短的那个引用</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">shorterString</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt;=s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">shorterString</span><span class="params">(<span class="built_in">string</span> &amp;s1, <span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> &amp;r = shorterSting(<span class="keyword">const_cast</span>&lt;<span class="keyword">const</span> <span class="built_in">string</span>&amp;&gt;(s1),<span class="keyword">const_cast</span>&lt;<span class="keyword">const</span> <span class="built_in">string</span>&amp;&gt;(s2));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="built_in">string</span>&amp;&gt;(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="重载与作用域"><a href="#重载与作用域" class="headerlink" title="重载与作用域"></a>重载与作用域</h2><ul><li><p>如果在内层作用域声明名字，它将隐藏外层作用域中声明的同名实体。在不同的作用域中无法重载函数名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fooBar</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> <span class="built_in">read</span> = <span class="literal">false</span>;      <span class="comment">//新作用域：隐藏了外层的read</span></span><br><span class="line">  <span class="built_in">string</span> s = <span class="built_in">read</span>();      <span class="comment">//错误：read是一个bool值，而非函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>)</span></span>;        <span class="comment">//新作用域：隐藏了外层的print</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Value: "</span>);       <span class="comment">//错误：print(const string &amp;)被隐层掉了</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="number">3.14</span>);            <span class="comment">//正确：调用print(int)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当调用print函数时，编译器首先寻找对该函数名的声明，找到的是接受int值的那个局部声明。一旦在当前作用域找到了所需的名字，编译器就会忽略掉外层作用域的同名实体。剩下的工作就是检查函数调用是否有效了。<u>在C++语言中，名字查找发生在类型检查之前。</u></p></li></ul><h1 id="特殊用途语言特性"><a href="#特殊用途语言特性" class="headerlink" title="特殊用途语言特性"></a>特殊用途语言特性</h1><h2 id="默认实参"><a href="#默认实参" class="headerlink" title="默认实参"></a>默认实参</h2><ul><li><p>某些函数有些形参，在函数的很多次调用中它们都被赋予一个相同的值，这个反复出现的值即为<strong>默认形参</strong>(defalut arguement).调用含有默认实参的函数时，可以包括该实参，也可以省略该实参。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span>::size_type sz;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">screen</span><span class="params">(sz ht = <span class="number">24</span>,sz wid = <span class="number">80</span>, <span class="keyword">char</span> <span class="built_in">background</span> = <span class="string">' '</span>)</span></span>;   <span class="comment">//每个形参都提供了默认实参</span></span><br><span class="line">sting window;</span><br><span class="line">window = screen();             <span class="comment">//等价于screen(24,80,' ')</span></span><br><span class="line">window = screen(<span class="number">66</span>);           <span class="comment">//等价于screen(66,80,' ')</span></span><br><span class="line">window = screen(<span class="number">66</span>,<span class="number">256</span>);       <span class="comment">//等价于screen(66,256,' ')</span></span><br><span class="line">window = screen(<span class="number">66</span>,<span class="number">256</span>,<span class="string">'#'</span>);</span><br><span class="line">window = screen(, , <span class="string">'?'</span>);      <span class="comment">//错误：只能省略尾部的实参</span></span><br><span class="line">window = screen(<span class="string">'?'</span>);          <span class="comment">//调用screen('?',80,' ')'?'隐式转换成string::size_type,也就是63</span></span><br></pre></td></tr></table></figure></li><li><p>函数如果被声明过，它的后续声明<u>只能为之前那些没有默认值的形参添加默认实参，而且该形参右侧的所有必须都有默认值。</u>且不能修改一个已经存在的默认值。</p></li><li><p><u>局部变量不能作为默认实参。并且只要表达式的类型能转换成形参所需的类型，该表达式就能作为默认实参。</u></p></li><li><p><u>用作默认实参的名字在函数声明所在的作用域内解析，而这些名字的求值过程发生在函数调用时：</u></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sz wd = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">char</span> def = <span class="string">' '</span>;</span><br><span class="line"><span class="function">sz <span class="title">ht</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">screen</span><span class="params">(sz = ht(), sz = wd, <span class="keyword">char</span> = def)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  def = <span class="string">'*'</span>;        <span class="comment">//改变默认实参的值</span></span><br><span class="line">  sz wd = <span class="number">100</span>;      <span class="comment">//隐藏了外层定义的wd，但没有改变默认值</span></span><br><span class="line">  window = screen();<span class="comment">//调用screen(ht(),80,'*')</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="内联函数和constexpr函数"><a href="#内联函数和constexpr函数" class="headerlink" title="内联函数和constexpr函数"></a>内联函数和constexpr函数</h2><ul><li><p>在上文中编写了一个小函数，它的作用时比较两个string形参的长度并返回长度较小的string的引用。把这种规模较小的操作定义成函数由很多好处，但是有一个缺点：调用函数一般比求等价表达式要慢。</p></li><li><p>将函数定义成<strong>内联函数</strong>(inline),通常就是将它在每个调用点上“内联地展开。内联函数可以避免函数调用的开销。在函数的返回类型前加上关键字inline就可以声明称内联函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="title">shorterString</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s1,<span class="keyword">const</span> <span class="built_in">string</span>&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s1.<span class="built_in">size</span>() &lt;= s2.<span class="built_in">size</span>() ? s1 : s2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; shorterString(s1,s2)&lt;&lt;<span class="built_in">endl</span>;         <span class="comment">//将在编译过程中展开类似于下面的操作</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (s1.<span class="built_in">size</span>() &lt; s2.<span class="built_in">size</span>() ? s1 : s2) &lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li><li><p>内联说明只是向编译器发出的一个请求，编译器可以选择忽略这个请求。</p></li><li><p><strong>constexpr函数</strong>(constexpr function)是指能用于==常量表达式==的函数。</p></li><li><p>定义constexpr必须符合两个规定：<strong><u>函数的返回类型和所有形参的类型都得是字面值类型；函数体中有且只有一条return语句。</u></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> new_sz &#123;<span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> foo = new_sz();     <span class="comment">//正确。foo是一个常量表达式</span></span><br></pre></td></tr></table></figure><p>因为编译器能在程序编译时验证new_sz函数返回的是常量表达式，所以可用new_sz函数初始化constexpr类型变量foo。初始化开始时，编译器把对constexpr函数的调用替换成其他结果值。为了能在编译过程中随时展开，==constexpr函数被隐式地指定为内联函数。==</p></li><li><p>constexpr函数体内也可以包含其他语句，只要这些语句在运行时不执行任何操作，如空语句、类型别名以及using声明。</p></li><li><p>允许constexpr函数的返回值不是一个常量，当scale的实参是常量表达式时，它的返回值也是常量表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">scale</span><span class="params">(<span class="keyword">size_t</span> cnt)</span> </span>&#123;<span class="keyword">return</span> new_sz() * cnt; &#125;</span><br><span class="line"><span class="keyword">int</span> arr[scale(<span class="number">2</span>)];             <span class="comment">//正确：scale(2)是常量表达式</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;                     <span class="comment">//i不是常量表达式</span></span><br><span class="line"><span class="keyword">int</span> a2[scale(i)];              <span class="comment">//错误：scale(i)不是常量表达式</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="调试帮助"><a href="#调试帮助" class="headerlink" title="调试帮助"></a>调试帮助</h2><ul><li><p>程序可包含一些用于调试的代码，只在开发时使用，发布时需屏蔽掉调试代码。这种方法用到两项预处理功能：assert和NDEBUG。</p></li><li><p><strong>assert</strong>是一种<strong>预处理宏</strong>(preprocesser marco)。预处理宏就是一个==预处理变量==，它的行为类似于内联函数。</p></li><li><p>assert宏使用一个表达式作为它的条件：<code>assert (expr);</code>首先对expr求值，如果表达式为假（即0），assert输出信息并终止程序的执行。如果表达式为真，assert什么也不做。</p></li><li><p>assert宏定义在<strong>cassert</strong>头文件中。预处理器名字由预处理器而非编译器管理，因此可以使用预处理器名字而无需提供using声明。</p></li><li><p>assert宏常用于检查”不能发生“的条件。如一个输入文本进行操作的程序可能要求所有给定单词的长度都大于某个阈值。此时程序可以包括一条这样的语句：<code>assert(word.size() &gt; thresold);</code></p></li><li><p>assert的行为依赖于一个名为NDEBUG的预处理变量的状态。如果定义了NDEBUG则assert什么也不做，默认状态下没有定义。</p></li><li><p>可以使用一个#define语句定义NDEBUG，从而关闭调试状态。同时很多编译器提供了一个命令行选项使我们可以定义预处理变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ CC -D NDEBUG main.cc</span><br></pre></td></tr></table></figure><p>等价于在main.c文件的一开始写#define NDEBUG。</p></li><li><p>assert可以当成调试程序的一种辅助手段，但不可代替真正的运行时逻辑检查、错误检查等。</p></li><li><p>可用NDEBUG编写自己的条件测试代码，如果NEDBUG未定义，则执行<code>ifndef</code>和<code>endif</code>之间的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> ia[], <span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NEDBUG</span></span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; __func__ &lt;&lt; <span class="string">": array size is "</span> &lt;&lt; <span class="built_in">size</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>__func__</code>：编译器为每个函数定义了该变量，它是<code>const char</code>的静态数组，存放函数的名字</p></li><li><p>预处理器定义了另外几个对调试有用的名字：</p><ul><li><code>__FILE__</code>存放文件名的字符串字面值</li><li><code>__LINE__</code>存放当前行号的整型字面值</li><li><code>__TIME__</code>存放文件编译时间的字符串字面值</li><li><code>__DATE__</code>存放文件编译日期的字符串字面值</li></ul></li></ul><h1 id="函数匹配"><a href="#函数匹配" class="headerlink" title="函数匹配"></a>函数匹配</h1><ul><li><p>函数匹配第一步选定本次调用的对应的重载函数集，集合中的函数称为<strong>候选函数</strong>(candidate function):它们与被调用的函数同名，且其声明在调用点可见。</p></li><li><p>第二步从候选函数中选出能被这组实参调用的函数，这些函数称为<strong>可行函数</strong>(viable function):它们的形参数量与本次调用提供的实参相等，每个实参的类型与对应的形参类型相同，或者能转换成形参的类型。</p></li><li><p>第三步是从可行函数中选择与本次调用最匹配的函数。在这过程中，逐一检查函数调用提供的实参，寻找形参类型与实参类型最匹配的那个可行函数。实参类型与形参类型越接近，它们匹配的越好。</p></li><li><p>含有多个形参的函数匹配，如果有且只有一个函数满足以下条件，则匹配成功：</p><ul><li>该函数每个实参的匹配都不劣于其他可行函数需要的匹配。</li><li>至少有一个实参的匹配优于其他可行函数提供的匹配。</li></ul><p>如果没有任何一个函数可行，则该调用是错误的，编译器将报告<strong>二义性调用</strong>的错误。</p></li><li><p>为了确定最佳匹配，编译器将实参类型到形参类型的转换划分成几个等级：</p><ol><li>精确匹配：<ul><li>实参类型和形参类型相同。</li><li>实参从数组类型或函数类型转换成对应的指针类型。</li><li>向实参添加顶层const或者从实参从删除顶层const。</li></ul></li><li>通过const转换实现的匹配。</li><li>通过类型提升实现的匹配。</li><li>通过算术类型转换实现的匹配。</li><li>通过类类型转换实现的匹配。</li></ol></li></ul><h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><ul><li><p>函数指针指向的是函数而非对象。函数指针指向特定的类型。</p></li><li><p>函数的类型由它的返回类型和形参类型共同决定，与函数名无关。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">legthCompare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;, <span class="keyword">const</span> <span class="built_in">string</span> &amp;)</span></span>;</span><br><span class="line"><span class="keyword">bool</span> (*pf) (<span class="keyword">const</span> <span class="built_in">string</span> &amp;,<span class="keyword">const</span> <span class="built_in">string</span> &amp;);   <span class="comment">//指向函数的指针，未初始化</span></span><br></pre></td></tr></table></figure></li><li><p>当把函数名作为一个值使用时，该函数自动转换为指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pf = lengthCompare;</span><br><span class="line">pf = &amp;lengthCompare;<span class="comment">//两者等价</span></span><br></pre></td></tr></table></figure></li><li><p>可以直接使用指向函数的指针调用该函数，无需解引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> b1 = pf(<span class="string">"hello"</span>,<span class="string">"goodbye"</span>);</span><br><span class="line"><span class="keyword">bool</span> b2 = &amp;pf(<span class="string">"hello"</span>,<span class="string">"goodbye"</span>);</span><br><span class="line"><span class="keyword">bool</span> b3 = lengthCompare(<span class="string">"hello"</span>,<span class="string">"goodbye"</span>);<span class="comment">//三者等价</span></span><br></pre></td></tr></table></figure></li><li><p><u>在指向不同函数类型的指针间不存在转换规则。</u></p></li><li><p>可以为函数指针赋一个nullptr或者值为0的整型常量表达式，表示该指针没有指向任何任何一个函数。</p></li><li><p>如果定义了指向重载函数的指针，编译器通过指针类型决定选用哪个函数，指针类型必须与重载函数中的某一个精确匹配。</p></li><li><p><strong>函数类型形参</strong>：和数组一样，虽然不能定义函数类型的形参，但是形参可以是指向函数的指针。此时形参看起来像函数，实际上被当作指针使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下两行等价</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">useBigger</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2,<span class="keyword">bool</span> pf(<span class="keyword">const</span> <span class="built_in">string</span> &amp;,<span class="keyword">const</span> <span class="built_in">string</span> &amp;))</span></span></span><br><span class="line"><span class="function"><span class="comment">//第三个形参是函数类型，被自动地转换成指向函数的指针</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">useBigger</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2,<span class="keyword">bool</span> (*pf)(<span class="keyword">const</span> <span class="built_in">string</span> &amp;,<span class="keyword">const</span> <span class="built_in">string</span> &amp;))</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">useBigger</span><span class="params">(s1,s2,lengthCompare)</span><span class="comment">//自动将函数legthCompare转换成指向该函数的指针</span></span></span><br></pre></td></tr></table></figure></li><li><p>可以使用typedef和的decltype简化函数指针的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Func 和 Func2是函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">bool</span> <span class="title">Func</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;, <span class="keyword">const</span> <span class="built_in">string</span>&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(lengthCompare)</span> Func2</span>;           <span class="comment">//两者等价</span></span><br><span class="line"><span class="comment">//FuncP 和 Funcp2是指向函数的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">bool</span><span class="params">(*FuncP)</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;,<span class="keyword">const</span> <span class="built_in">string</span> &amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(lengthCompare)</span> *FuncP2</span>;        <span class="comment">//两者等价，decltype地结果是函数类型，只有加上*才会得到指针</span></span><br></pre></td></tr></table></figure></li><li><p><strong>可以返回指向函数类型的指针，但必须把返回类型写成指针形式。</strong>返回类型不会被自动当成对应的指针类型处理。</p></li><li><p>可以使用<strong>类型别名</strong>和<strong>尾置返回类型</strong>声明一个返回函数指针的函数。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> F = <span class="keyword">int</span>(<span class="keyword">int</span>*,<span class="keyword">int</span>);      <span class="comment">//P是函数类型</span></span><br><span class="line"><span class="keyword">using</span> PF = <span class="keyword">int</span>(*)(<span class="keyword">int</span>*,<span class="keyword">int</span>);  <span class="comment">//PF是指针类型</span></span><br><span class="line"><span class="function">PF <span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span></span>;            <span class="comment">//正确：PF是指向函数的指针，f1返回指向函数的指针</span></span><br><span class="line"><span class="function">F <span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span></span>;             <span class="comment">//错误：F是函数类型，f1不能返回函数</span></span><br><span class="line"><span class="function">F *<span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span></span>;            <span class="comment">//正确：显示地指定返回类型是指向函数的指针；</span></span><br><span class="line"><span class="keyword">int</span> (*f1(<span class="keyword">int</span>))(<span class="keyword">int</span>*,<span class="keyword">int</span>);<span class="comment">//直接声明f1</span></span><br><span class="line">auto f1(int) -&gt; int (*)(int*,int);//尾置返回类型</span><br></pre></td></tr></table></figure></li><li><p>auto和decltype也可用于返回函数指针的原型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>::<span class="function">size_type <span class="title">sumLength</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;,<span class="keyword">const</span> <span class="built_in">string</span>&amp;)</span></span>;</span><br><span class="line"><span class="built_in">string</span>::<span class="function">size_type <span class="title">largerLength</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;,<span class="keyword">const</span> <span class="built_in">string</span>&amp;)</span></span>;</span><br><span class="line"><span class="keyword">decltype</span>(sumLength) *getFcn(<span class="keyword">const</span> <span class="built_in">string</span>&amp;);    <span class="comment">//该函数返回一个指针，指向前两个函数中地一个</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 《c++primer》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《c++primer》第五章 语句</title>
      <link href="2020/10/21/%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%AF%AD%E5%8F%A5/"/>
      <url>2020/10/21/%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h1><ul><li>C++语言中的大多数语句都以分号结束，一个表达式末尾加上分号就变成了<strong>表达式语句</strong>(expression statement).</li><li>表达式语句的作用是执行表达式并丢弃掉求值结果。</li><li>最简单的语句是<strong>空语句</strong>(null statement)，空语句中只含有一个单独的分号。</li><li><strong>复合语句</strong>(compound statement)是指用花括号括起来的（可能为空的）语句和声明的序列，复合语句也被称作<strong>块</strong>(block)。一个块就是一个作用域，在块中引入的名字只能在块内部以及嵌套在块中的子块里访问。</li></ul><a id="more"></a><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ul><li><strong>if语句</strong>(if statement)的作用是：判断一个指定条件是否为真，根据判断结果决定是否执行另外一条语句。</li><li>if语句包括两种形式：一种含有else分支，另一种没有。</li><li><strong>悬垂else</strong>(dangling else)：当一个if语句嵌套在另一个if语句内部时，很可能if分支会多于else分支，所以无法确定某个给定的else是和哪个if匹配。就C++而言，它规定else与离它最近的尚未匹配的if匹配。</li><li>要想使else分支和外层的if语句匹配起来，可以在内层if语句的两端加上花括号使其成为一个块。</li></ul><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><ul><li><p><strong>switch语句</strong>(switch statement)提供了一条便利的途径使得我们能在若干固定选项中做出选择。</p><ul><li>switch语句首先对括号里的表达式求值，可以是一个初始化的变量声明。表达式的值转换成整数类型，然后与每个case标签的值比较。</li><li>如果表达式和某个case标签的值匹配成功，程序从该标签之后的第一条语句开始执行，直到到达了switch的结尾或者是遇到了一条break语句为止。</li><li>如果switch语句的表达式和所有case都没有匹配上，将直接跳转到switch结构之后的第一条语句。</li><li>case关键字和它对应的值一起被称为<strong>case标签</strong>(case label)。<strong>case标签必须是整型常量表达式。</strong></li><li>任何两个case标签的值不能相同，否则会引发错误。</li></ul></li><li><p><strong>default标签</strong>(default label)：如果没有任何一个case标签能匹配上switch表达式的值，程序将执行紧跟在default标签后面的语句。</p></li><li><p>标签不应该孤零零地出现，它后面必须跟上一条语句或者另外一个case标签。</p></li><li><p>如果在某处一个带有初值的变量位于作用于之外，在另一处该变量位于作用域之内，则从前一处跳转到后一处是非法行为。C++语言规定，<u>不允许跨过变量的初始化语句直接跳转到该变量作用域内的另一个位置。</u>如果要为某个case分支定义并初始化一个变量，应该把变量定义在块内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">  <span class="comment">//因为程序的执行可能绕开下面的初始化语句，所以该switch语句不合法</span></span><br><span class="line">  <span class="built_in">string</span> file_name;             <span class="comment">//错误：控制流绕过一个隐式初始化的变量</span></span><br><span class="line">  <span class="keyword">int</span> ival = <span class="number">0</span>                  <span class="comment">//错误：控制流绕过一个显式初始化的变量</span></span><br><span class="line">  <span class="keyword">int</span> jval;                     <span class="comment">//正确：因为jval没有初始化</span></span><br><span class="line"><span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">  <span class="comment">//正确：jval虽然在作用域内，但是它没有被初始化</span></span><br><span class="line">  jval = next_num();            <span class="comment">//正确：给jval赋一个值</span></span><br><span class="line">  <span class="keyword">if</span>(file_name.empty())         <span class="comment">//file_name在作用域内。但是没有被初始化</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></li></ul><h1 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h1><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">       statement</span><br></pre></td></tr></table></figure><ul><li>定义在while条件部分或者while循环体内的变量每次迭代都经历从创建到销毁的过程。</li><li>condition不能为空。</li></ul><h2 id="传统的for语句"><a href="#传统的for语句" class="headerlink" title="传统的for语句"></a>传统的for语句</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(init-statement;condition;expression)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><ul><li>init-statement可以定义多个对象，但是只能有一条声明语句，因此所有变量的基础类型必须相同。</li><li>for语句头能省略掉init-statement、condition、和expression中的任何一个（或者全部）。</li></ul><h2 id="范围for语句"><a href="#范围for语句" class="headerlink" title="范围for语句"></a>范围for语句</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (declaration : expression)</span><br><span class="line">     statement</span><br></pre></td></tr></table></figure><ul><li>expression表示的必须是一个序列，比如用花括号括起来的初始值列表、数组或者vector或string类型等对象。<u><strong>这些类型的共同特点是拥有能返回迭代器的begin和end成员。</strong></u></li></ul><h2 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do while语句"></a>do while语句</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> </span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><h1 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h1><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><ul><li><strong>break语句</strong>(break statement)负责终止离它最近的while、do while、for或switch语句，并从这些语句之后的第一条语句开始执行。</li><li>break语句只能出现在迭代语句或者switch语句内部（包括嵌套在此类循环里的语句或块的内部）。break语句的作用范围仅限于最近的循环或者switch。</li></ul><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><ul><li><strong>continue语句</strong>(continue statement)终止最近的循环中的当前迭代并立即开始下一次迭代。</li><li>continue语句只能出现在for、while、do while循环的内部，或者嵌套在此类循环里的语句或块的内部。</li></ul><h2 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h2><ul><li><p><strong>goto语句</strong>(goto statement)的作用是从goto语句无条件跳转到<strong>同一函数内的另一条语句。</strong></p></li><li><p><code>goto label;</code></p></li><li><p>label是用于标识一条语句的标示符。<strong>带标签语句</strong>(labeled statement)是一种特殊的语句，在它之前有一个标示符以及一个冒号。</p></li><li><p>标签标示符独立于变量或其他标示符的名字，因此，标签标示符可以和程序中其他实体的标示符使用同一个名字而不会相互干扰。</p></li><li><p>和switch语句类似，goto语句也不能将程序的控制权从变量的作用域之外转移到作用域之内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="keyword">goto</span> <span class="built_in">end</span>;</span><br><span class="line">   <span class="keyword">int</span> ix = <span class="number">10</span>;              <span class="comment">//错误：goto语句绕过了一个带初始化的变量定义</span></span><br><span class="line"><span class="built_in">end</span>:   ix = <span class="number">42</span>;              <span class="comment">//错误：此处代码需要使用ix，但是goto语句绕过了它的声明</span></span><br></pre></td></tr></table></figure></li><li><p>向后绕过一个已经执行的定义是合法的。条回到变量定义之前意味着系统将销毁该变量，然后重新创建它。</p></li></ul><h1 id="try语句块和异常处理"><a href="#try语句块和异常处理" class="headerlink" title="try语句块和异常处理"></a>try语句块和异常处理</h1><ul><li>异常是指存在于运行时的反常行为，这些行为超出了函数正常功能的范围。当程序的某部分检测到一个它无法处理的问题时，需要用到异常处理。</li><li>在C++语言中，异常处理包括：<ul><li><strong>throw表达式</strong>(throw expression)：异常检测部分使用throw表达式来表示它遇到了无法处理的问题。我们说throw<strong>引发</strong>(raise)了异常。</li><li><strong>try语句块</strong>(try block)：异常处理部分使用try语句块处理异常。try语句块以关键字try开始，并以一个或多个<strong>catch子句</strong>(catch clause)结束。try语句块中代码抛出的异常通常会被某个catch子句处理。因为catch子句“处理”异常，所以它们也被称作<strong>异常处理代码</strong>(exception handler).。</li><li>一套<strong>异常类</strong>(exception class)：用于在throw表达式和相关的catch子句之间传递异常的具体信息。</li></ul></li></ul><h2 id="throw表达式"><a href="#throw表达式" class="headerlink" title="throw表达式"></a>throw表达式</h2><ul><li><p>程序的异常检测部分使用throw表达式引发一个异常。<u>throw表达式包含关键字throw和紧随其后的一个表达式，其中表达式的类型就是抛出的异常类型。</u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sales_item item1, item2;</span><br><span class="line">cin &gt;&gt; item1 &gt;&gt; item2;</span><br><span class="line">&#x2F;&#x2F;检查item1和item2是否表示同一种书籍</span><br><span class="line">if (item1.isbn() &#x3D;&#x3D; item.isbn())&#123;</span><br><span class="line">    cout &lt;&lt; item1 + item2 &lt;&lt;endl;</span><br><span class="line">    return 0;           &#x2F;&#x2F;表示成功</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">   throw runtime_error(&quot;Data must refer to same ISBN&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型runtime_error 是标准库异常类型的一种，定义在头文件<strong>stdexcept</strong>头文件中。必须初始化runtime_error的对象，方式是给它提供一个string对象或者一个C风格的字符串，这个字符串中有一些异常的辅助信息。</p></li></ul><h2 id="try语句块"><a href="#try语句块" class="headerlink" title="try语句块"></a>try语句块</h2><ul><li><p>try语句块的通用用法是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    program-statements</span><br><span class="line">&#125;<span class="keyword">catch</span> (exception-declaration)&#123;</span><br><span class="line">    handler-statements</span><br><span class="line">&#125;<span class="keyword">catch</span> (exception-declaration)&#123;</span><br><span class="line">    handler-statements</span><br><span class="line">&#125;<span class="comment">//...</span></span><br></pre></td></tr></table></figure></li><li><p>try语句块一开始是关键字try，随后紧跟着一个块。跟在try块之后的是一个或多个catch子句。catch子句包括三部分：关键字catch、括号内一个（可能为命名的）对象的声明（称作<strong>异常声明</strong>，exception declaration）以及一个块。当选中了某个catch子句处理异常之后，执行与之对应的块。catch一旦完成，程序跳转到try语句块最后一个catch子句之后的那条语句继续执行。</p></li></ul><h2 id="标准异常"><a href="#标准异常" class="headerlink" title="标准异常"></a>标准异常</h2><ul><li><p>C++标准库定义了一组异常类，分别定义在4个头文件中：</p><ul><li>exception头文件定义了最通用的异常类exception。它只报告异常的发生，不提供任何意外信息。</li><li>stdexcept头文件定义了几种常用的异常类。</li><li>new头文件定义了bad_alloc异常类型。</li><li>type_info头文件定义了bad_cast异常类型。</li></ul></li><li><p><stdexcept>定义的异常类</p><table><thead><tr><th>异常类</th><th>功能</th></tr></thead><tbody><tr><td>exception</td><td>最常见的问题</td></tr><tr><td>runtime_error</td><td>只有在运行时才能检测出的问题</td></tr><tr><td>range_error</td><td>运行时错误：生成的结果超出了有意义的值域范围</td></tr><tr><td>overflow_error</td><td>运行时错误：计算上溢</td></tr><tr><td>underflow_error</td><td>运行时错误：计算下溢</td></tr><tr><td>logic_error</td><td>程序逻辑错误</td></tr><tr><td>domain_error</td><td>逻辑错误：参数对应的结果不存在</td></tr><tr><td>invalid_argument</td><td>逻辑错误：无效参数</td></tr><tr><td>length_error</td><td>逻辑错误：试图创建一个超出该类型最大长度的对象</td></tr><tr><td>out_of_range</td><td>逻辑错误：使用一个超出有效范围的值</td></tr></tbody></table></li><li><p>标准库异常类只定义了几种运算，包括创建或拷贝异常类型的对象，以及为异常类型的对象赋值。</p></li><li><p><u>只能以默认初始化的方式初始化exception、bad_alloc和bad_cast对象，不允许为这些对象提供初始值。</u></p></li><li><p><u>其他异常类型的行为则恰好相反：应该使用string对象或C风格字符串初始化这些类型的对象，但是不允许使用默认初始化的方式。当创建此类对象时，必须提供初始值，该初始值含有错误的相关信息。</u></p></li><li><p>异常类型只定义了一个名为what的成员函数，该函数没有任何参数，返回值是一个指向C风格字符串的const char*，提供关于异常的一些文本信息。what函数返回的C风格字符串的内容与异常对象的类型有关。如果异常类型有一个字符串初始值，则what返回该字符串。对于其他无初始值的异常类型，what返回的内容有编译器决定。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 《c++primer》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《c++primer》第四章 表达式</title>
      <link href="2020/10/20/20201020-%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/10/20/20201020-%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li>表达式由一个或多个<strong>运算对象</strong>(operand)组成,对表达式求值将得到一个<strong>结果</strong>(result)。字面值和变量是最简单的<strong>表达式</strong>(expression),其结果就是字面值和变量的值。把一个<strong>运算符</strong>(operator)和一个或多个运算对象组合起来可以生成较复杂的表达式。</li><li><u><strong>左值</strong>(lvalue)和<strong>右值</strong>(rvalue)：</u><ul><li>当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。</li><li>在需要右值的地方可以用左值来代替，但是不能把右值当作左值（也就是位置）来使用。当一个左值被当成右值使用时，实际使用的是它的内容（值）。</li><li>以下情况需要用到左值：<ol><li>赋值运算符需要一个（非常量）左值作为其左侧运算对象，得到的结果也仍然是一个左值。</li><li>取地址符作用于一个左值运算对象，返回一个指向该运算对象的指针，这个指针是一个右值。</li><li>内置解引用运算符、下标运算符、迭代器解引用运算符、string和vector的下标运算符的求值结果都是左值。</li><li>内置类型和迭代器的递增递减运算符作用于左值运算对象，其前置版本所得的结果也是左值。</li></ol></li><li>使用decltype时，如果表达式的求值结果是左值，decltype作用于该表达式（不是变量）得到一个引用类型。比如：假定p的类型是int<em>，decltype(</em>p)的结果是int&amp;，因为解引用运算符生成左值。另一方面，因为取地址运算符生成右值，所以decltype(&amp;p)的结果是int**。</li></ul></li></ul><a id="more"></a><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><ul><li><u>算数运算符的运算对象和求值结果都是右值。</u></li><li>一元运算符（+ ：一元正号，- ：一元负号）的优先级最高，接下来是乘法和除法和求余，最低的是加法和减法。</li><li>算术运算符满足左结合律。</li></ul><h1 id="逻辑和关系运算符"><a href="#逻辑和关系运算符" class="headerlink" title="逻辑和关系运算符"></a>逻辑和关系运算符</h1><table><thead><tr><th>结合律</th><th>运算符</th><th>功能</th><th>用法</th></tr></thead><tbody><tr><td>右</td><td>！</td><td>逻辑非</td><td>!expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>&lt;</td><td>小于</td><td>expr &lt; expr</td></tr><tr><td>左</td><td>&lt;=</td><td>小于等于</td><td>expr &lt;= expr</td></tr><tr><td>左</td><td>&gt;</td><td>大于</td><td>expr &gt; expr</td></tr><tr><td>左</td><td>&gt;=</td><td>大于等于</td><td>expr &gt;= expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>==</td><td>相等</td><td>expr == expr</td></tr><tr><td>左</td><td>!=</td><td>不相等</td><td>expr != expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>&amp;&amp;</td><td>逻辑与</td><td>expr &amp;&amp; expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>||</td><td>逻辑或</td><td>expr || expr</td></tr></tbody></table><ul><li>对于逻辑与（或）运算符来说，当且仅当左侧运算对象为真（假）时才对右侧运算对象求值。</li><li>逻辑运算符和关系运算符的返回值都是布尔类型，运算对象和求值结果都是右值。</li></ul><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><ul><li>赋值运算符的左侧对象必须是一个可修改的左值。</li><li>赋值运算的结果是它的左侧对象，并且是一个左值。相应的，结果的类型就是左侧运算对象的类型。</li><li>赋值运算满足右结合律。</li><li>对于多重赋值语句中的每一个对象，它的类型或者与右边对象的类型相同、或者可由右边对象的类型转换得到。</li><li>赋值运算符优先级较低。</li></ul><h1 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h1><ul><li>前置版本会首先将运算对象加1（或者减1），然后将改变后的对象作为求值结果。</li><li>后置版本也会将运算对象加1（或者减1），但是求值结果是运算对象改变之前那个值的副本。</li><li><u>这两种运算符必须作用于左值运算对象。前置版本将对象本身作为左值返回，后置版本将对象原始值的副本作为右值返回。</u></li><li>一般情况下优先使用前置版本，因为前置版本的递增运算符避免了不必要的工作，它把值加1后直接返回改变了的运算对象。与之相比，后置版本需要将原始值储存下来以便于返回这个未修改的内容。若果我们不需要修改前的值，后置版本的操作就是一种浪费。</li></ul><h1 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h1><ul><li>点运算符和箭头运算符都可用于访问成员，ptr-&gt;mem 等价于 (*ptr).mem。</li><li>点运算符获取类对象的一个成员。</li><li><u>箭头运算符作用于一个指针类型的运算对象，结果是一个左值。</u></li><li><u>如果成员所属的对象是左值，那么结果是左值；反之，如果成员所属的对象是右值，那么结果是右值。</u></li></ul><h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h1><ul><li>条件运算符允许我们把简单的if-else逻辑嵌入到单个表达式当中，其形式为：<code>cond ?  expr1 : expr2;</code></li><li>条件运算符的运算过程是：首先求cond的值，如果条件为真则对expr1求值并返回该值，否则对expr2求值并返回该值。</li><li>嵌套条件运算符：<code>finalgrade = (grade &gt; 90) ? &quot;high pass&quot; : (grade &lt; 60) ? &quot;fail&quot; : &quot;pass&quot;</code>。</li></ul><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><table><thead><tr><th>运算符</th><th>功能</th><th>用法</th></tr></thead><tbody><tr><td>~</td><td>位求反</td><td>~ expr</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>expr1 &lt;&lt; expr2</td></tr><tr><td>&lt;&lt;</td><td>右移</td><td>expr1 &gt;&gt; expr2</td></tr><tr><td>&amp;</td><td>位与</td><td>expr &amp; expr</td></tr><tr><td>^</td><td>位异或</td><td>expr ^ expr</td></tr><tr><td>|</td><td>位或</td><td>expr | expr</td></tr></tbody></table><ul><li>位运算符作用于整数类型的运算对象，并把运算对象看作是二进制单位的集合。一种名为bitset的标准库类型也能表示任意大小的二进制位集合，所以位运算符同样能用于bitset类型。</li><li>一般来说，如果运算对象是“小整型”，则它的值会被自动提升成较大的整数类型。</li><li>运算对象可以带符号，也可以无符号。如果运算对象带符号且它的值为负，那么位运算符如何处理运算对象的“符号位”依赖于机器。而且此时的左移操作可能会改变符号位的值，因此是一种为定义的行为。</li><li>移位运算符：<ul><li>这两种运算符的内置含义是对其运算对象执行基于二进制的移动操作，首先令左侧运算对象的内容按照右侧运算对象的要求移动指定位数，然后将经过移动的（可能还进行了提升）左侧运算对象的拷贝作为求值结果。</li><li>右侧运算对象的值一定不能为负，而且值必须小于结果的位数，否则就会产生未定义的行为。</li><li>左移运算符（ &lt;&lt; ）在右侧插入值为0的二进制位。右移运算符（ &gt;&gt; ）的行为则依赖于左侧运算对象的类型：如果该运算对象是无符号类型，在左侧插入值为0的二进制位；<u>如果该运算对象是带符号类型，在左侧插入符号位的副本或值为0的二进制位，如何选择要视具体环境而定。</u></li></ul></li><li>位与运算符（&amp;）：如果两个对象的对应位置都为1则运算结果中该位为1，否则为0。（将前一个运算对象的1改为0）</li><li>位或运算符（|）：如果两个对象的对应位置都为0则运算结果中该位为0，否则为1。（将前一个运算对象的0改为1）</li><li>异或运算符（^）：如果两个运算对象的对应位置相等则为0，不等则为1。</li></ul><h1 id="sizeof运算符"><a href="#sizeof运算符" class="headerlink" title="sizeof运算符"></a>sizeof运算符</h1><ul><li>sizeof运算符返回一条表达式或一个类型名字所占的字节数，满足右结合律，其所得值是一个size_t类型。</li><li>其形式为<code>sizeof (type)</code> 或<code>sizeof expr</code>。</li><li>对char或者类型为char的表达式执行sizeof运算，结果为1；</li><li>对引用类型执行sizeof运算得到被引用对象所占空间大小；</li><li>对指针执行sizeof运算得到指针本身所占空间大小；</li><li>对解引用指针执行sizeof运算得到指针指向的对象所占空间大小，指针不许有效；</li><li>对数组执行sizeof运算得到数组所占空间的大小，等价于对数组中所有元素各执行一次sizeof运算并将所得结果求和；</li><li>对string对象或vector对象执行sizeof运算只返回该类型固定部分的大小，不会计算对象中的元素占用了多少空间。</li></ul><h1 id="逗号运算符-comma-operator"><a href="#逗号运算符-comma-operator" class="headerlink" title="逗号运算符(comma operator)"></a>逗号运算符(comma operator)</h1><ul><li>逗号运算符含有两个对象，按照从左向右的顺序依次求值。</li><li><u>对逗号运算符来说，首先对左侧的表达式求值，然后将求值结果丢弃掉。逗号运算符真正的运算结果是右侧表达式的值。如果右侧对象是左值，那么最终的求值结果也是左值。</u></li></ul><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><ul><li>在C++语言中，某些类型之间有关联。如果两个类型可以<strong>相互转换</strong>(conversion)，那么它们就是关联的。</li><li>自动执行的类型转换被称作<strong>隐式转换</strong>(implicit conversion)。<ul><li>在大多数表达式中，比int类型小的整数型首先提升为较大的整数类型。</li><li>在条件中，非布尔值转换成布尔类型。</li><li>初始化过程中，初始值转换成变量的类型；在赋值语句中，右侧运算对象转换成左侧运算对象的类型。</li><li>如果算术运算或关系运算的运算对象有多种类型，需要转换成同一种类型。</li><li>函数调用时也会发生类型转换。</li></ul></li></ul><h2 id="算术转换"><a href="#算术转换" class="headerlink" title="算术转换"></a>算术转换</h2><ul><li><strong>算术转换(arithmetic conversion)</strong>的含义是把一种算术类型转换成另外一种算术类型。运算符的运算对象将转换成最宽的类型。当表达式中既有浮点型也有整数类型时，整数值将转换成相应的浮点类型。</li><li><strong>整型提升(integral promotion)</strong>负责把小整数类型转换成较大的整数类型。</li></ul><h2 id="其他隐式类型转换"><a href="#其他隐式类型转换" class="headerlink" title="其他隐式类型转换"></a>其他隐式类型转换</h2><ul><li><p>数组转换成指针：在大多数表达式中，数组自动转换成指向数组首元素的指针。当数组被用作decltype关键字的参数，或者作为取地址符、sizeof及typeid等运算符的运算对象时，转换不会发生。如果用一个引用来初始化数组，转换也不会发生。</p></li><li><p>指针的转换：</p><ul><li>常量整数值0或者字面值nullptr能转换成任意指针类型。</li><li>指向任意非常量的指针能转换成void*。</li><li>指向任意对象的指针能转换成const void*。</li></ul></li><li><p>转换成布尔类型：如果指针或算数类型的值为0，转换结果是false；否则转换结果是true。</p></li><li><p>转换成常量：允许将指向非常量类型的指针转换成指向相应的常量类型的指针，对于引用也是这样。也就是说如果T是一种类型，我们就能将指向T的指针或引用分别转换成指向const T的指针或引用。相反的转换并不存在，因为它试图删除底层const。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;j = i;             <span class="comment">//非常量转换成const int的引用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;i;            <span class="comment">//非常量的地址转换成常量的地址</span></span><br><span class="line"><span class="keyword">int</span> &amp;r = j, *q = p;           <span class="comment">//错误：不允许const转换成非常量</span></span><br></pre></td></tr></table></figure></li><li><p>类类型定义的转换：类类型能定义由编译器自动执行的转换，不过编译器每次只能执行一种类类型的转换。</p></li></ul><h2 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h2><ul><li><p><strong>强制类型转换</strong>(cast)可以显式地将对象强制转换成另一种类型。</p></li><li><p>一个命名的强制类型转换具有如下形式：<code>cast-name&lt;type&gt;(expression)</code>。<strong>如果type是左值，则结果是左值</strong>。cast-name是static_cast、dynamic_cast、const_cast和reinterpret_cast中的一种。dynamic_cast支持运行时类型识别。cast_name指定了执行的是哪种转换。</p></li><li><p>static_cast：任何具有明确定义的类型转换，只要不包含底层const，都可以使用static_cast。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j = <span class="number">5</span> , i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> slope;</span><br><span class="line"><span class="keyword">double</span> slope = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(j) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">void</span> *p = &amp;j;</span><br><span class="line"><span class="keyword">double</span> *dp = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>*&gt;(p);</span><br></pre></td></tr></table></figure></li><li><p>const_cast：只能改变运算对象的底层const。对于将常量对象转换成非常量对象的行为，一般称为“<strong>去掉const性质（cast away the const）</strong>”，而只有const_cast能改变表达式的常量属性。</p></li><li><p>reinterpret_cast：通常为运算对象的位模式提供较低层次上的重新解释。</p></li></ul><h1 id="运算符优先级表"><a href="#运算符优先级表" class="headerlink" title="运算符优先级表"></a>运算符优先级表</h1><table><thead><tr><th>结合律</th><th>运算符</th><th>功能</th><th>用法</th></tr></thead><tbody><tr><td>左</td><td>::</td><td>全局作用域</td><td>::name</td></tr><tr><td>左</td><td>::</td><td>类作用域</td><td>class::name</td></tr><tr><td>左</td><td>::</td><td>命名空间作用域</td><td>namespace::name</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>.</td><td>成员选择</td><td>object.member</td></tr><tr><td>左</td><td>-&gt;</td><td>成员选择</td><td>pointer-&gt;member</td></tr><tr><td>左</td><td>[ ]</td><td>下标</td><td>expr[expr]</td></tr><tr><td>左</td><td>( )</td><td>函数调用</td><td>name(expr_list)</td></tr><tr><td>左</td><td>( )</td><td>类型构造</td><td>type(expr_list)</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>右</td><td>++</td><td>后置递增类型</td><td>lvalue++</td></tr><tr><td>右</td><td>–</td><td>后置递减类型</td><td>lvalue++</td></tr><tr><td>右</td><td>typeid</td><td>类型ID</td><td>typeid(type)</td></tr><tr><td>右</td><td>typeid</td><td>运行时类型ID</td><td>typeid(type)</td></tr><tr><td>右</td><td>explicit_cast</td><td>类型转换</td><td>cast_name<type>(expr)</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>右</td><td>++</td><td>前置递增运算</td><td>++lvalue</td></tr><tr><td>右</td><td>–</td><td>前置递减运算</td><td>–lvalue</td></tr><tr><td>右</td><td>~</td><td>位求反</td><td>~expr</td></tr><tr><td>右</td><td>!</td><td>逻辑非</td><td>!expr</td></tr><tr><td>右</td><td>-</td><td>一元负号</td><td>-expr</td></tr><tr><td>右</td><td>+</td><td>一元正号</td><td>+expr</td></tr><tr><td>右</td><td>*</td><td>解引用</td><td>*expr</td></tr><tr><td>右</td><td>&amp;</td><td>取地址</td><td>&amp;lvalue</td></tr><tr><td>右</td><td>( )</td><td>类型转换</td><td>(type)expr</td></tr><tr><td>右</td><td>sizeof</td><td>对象的大小</td><td>sizeof expr</td></tr><tr><td>右</td><td>sizeof</td><td>类型的大小</td><td>sizeof(type)</td></tr><tr><td>右</td><td>sizeof</td><td>参数包的大小</td><td>sizeof…(name)</td></tr><tr><td>右</td><td>new</td><td>创建对象</td><td>new type</td></tr><tr><td>右</td><td>new[ ]</td><td>创建数组</td><td>new type[ ]</td></tr><tr><td>右</td><td>delete</td><td>释放对象</td><td>delete expr</td></tr><tr><td>右</td><td>delete[ ]</td><td>释放数组</td><td>delete [ ] expr</td></tr><tr><td>右</td><td>noecept</td><td>能否抛出异常</td><td>noecept(expr)</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>-&gt;*</td><td>指向成员选择的指针</td><td>ptr-&gt;* ptr_to_member</td></tr><tr><td>左</td><td>.*</td><td>指向成员选择的指针</td><td>obj.*ptr_to_member</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>*</td><td>乘法</td><td>expr*expr</td></tr><tr><td>左</td><td>/</td><td>除法</td><td>expr/expr</td></tr><tr><td>左</td><td>%</td><td>取模</td><td>expr%expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>+</td><td>加法</td><td>expr+expr</td></tr><tr><td>左</td><td>-</td><td>减法</td><td>expr-expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>&lt;&lt;</td><td>向左移动</td><td>expr&lt;&lt;expr</td></tr><tr><td>左</td><td>&gt;&gt;</td><td>向右移动</td><td>expr&gt;&gt;expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>&lt;</td><td>小于</td><td>expr&lt;expr</td></tr><tr><td>左</td><td>&gt;</td><td>大于</td><td>expr&gt;expr</td></tr><tr><td>左</td><td>&gt;=</td><td>大于等于</td><td>expr&gt;=expr</td></tr><tr><td>左</td><td>&lt;=</td><td>小于等于</td><td>expr&lt;=expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>==</td><td>相等</td><td>expr==expr</td></tr><tr><td>左</td><td>!=</td><td>不相等</td><td>expr!=expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>&amp;</td><td>位与</td><td>expr&amp;expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>^</td><td>位异或</td><td>expr^expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>|</td><td>位或</td><td>expr | expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>&amp;&amp;</td><td>逻辑与</td><td>expr&amp;&amp;expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>||</td><td>逻辑或</td><td>expr||expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>右</td><td>？ ：</td><td>条件</td><td>expr?expr:expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>右</td><td>=</td><td>赋值</td><td>lvalue=expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>右</td><td>*=，+=，-=…</td><td>复合赋值</td><td>lvalue+=expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>右</td><td>throw</td><td>抛出异常</td><td>throw expr</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>左</td><td>,</td><td>逗号</td><td>expr,expr</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 《c++primer》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《c++primer》第三章 字符串、向量和数组</title>
      <link href="2020/10/15/20201015-%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/"/>
      <url>2020/10/15/20201015-%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="命名空间的using声明"><a href="#命名空间的using声明" class="headerlink" title="命名空间的using声明"></a>命名空间的using声明</h1><ul><li><p>使用<strong>using声明</strong>(using declaration)就无须专门的前缀也能使用所需的名字了。</p><p><code>using namespace::name；</code></p></li><li><p>每个名字都需要独立的using声明。</p></li><li><p>头文件不应包含using声明。</p></li></ul><a id="more"></a><h1 id="标准库类型string"><a href="#标准库类型string" class="headerlink" title="标准库类型string"></a>标准库类型string</h1><h2 id="定义和初始化string对象"><a href="#定义和初始化string对象" class="headerlink" title="定义和初始化string对象"></a>定义和初始化string对象</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1;                              <span class="comment">//默认初始化，s1是一个空串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(s1)</span></span>;                          <span class="comment">//s2是s1的副本</span></span><br><span class="line"><span class="built_in">string</span> s2 = s1;                         <span class="comment">//等价于s2(s1)</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(<span class="string">"value"</span>)</span></span>;                     <span class="comment">//s3是字面值"value"的副本，除了字面值最后的那个空字符外 </span></span><br><span class="line"><span class="built_in">string</span> s3 = <span class="string">"value"</span>;                    <span class="comment">//等价于s3("value")</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(n,<span class="string">'c'</span>)</span></span>;                       <span class="comment">//把s4初始化为由连续n个字符c组成的串</span></span><br></pre></td></tr></table></figure><ul><li>使用等号( = )初始化一个变量，执行的是<strong>拷贝初始化</strong>(copy initialization),编译器把等号右侧的初始值拷贝到新创建的对象中。</li><li>如果不使用等号，则执行<strong>直接初始化</strong>(direct initialization)。</li></ul><h2 id="string对象上的操作"><a href="#string对象上的操作" class="headerlink" title="string对象上的操作"></a>string对象上的操作</h2><ul><li>读写string对象：<ul><li><code>cin &gt;&gt; s;</code>将string对象读入s，遇到空白为止。</li><li><code>cout &lt;&lt; s;</code>  输出s。</li><li><u>string对象会自动忽略开头的空白，并从第一个正真的字符开始读起，直到遇见下一个空白。</u></li></ul></li><li>使用<strong>getline</strong>读取一整行：getline的参数是一个输入流和一个string对象。函数从给定的输入流中读入内容，<u>直到遇到换行符为止</u>（换行符也被存进来了），然后把所读内容存入到那个string对象中（不存换行符）。</li><li>string.empty()根据string对象是否为空返回一个对应的布尔值。</li><li>string.size()返回string对象的长度。其返回值是<strong>string::size_type</strong>类型，是一个无符号整数型。<strong><u>如果n是一个负值，则s.size()&lt;n的判断结果几乎肯定为true，因为n会自动转换成一个比较大的无符号值。</u></strong></li><li>比较string对象都按照字典顺序比较。</li><li>string对象可以和string对象相加，也可以和字符串字面值相加，但字符串字面值与string是不同的类型。</li></ul><h2 id="处理string对象中的字符"><a href="#处理string对象中的字符" class="headerlink" title="处理string对象中的字符"></a>处理string对象中的字符</h2><ul><li><p>在cctype头文件中定义了一组标准库函数来处理string对象中的字符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isalnum</span>(c)          <span class="comment">//当c是字母或数字时为真</span></span><br><span class="line"><span class="built_in">isalpha</span>(c)          <span class="comment">//当c是字母时为真 </span></span><br><span class="line"><span class="built_in">iscntrl</span>(c)          <span class="comment">//当c是控制字符时为真</span></span><br><span class="line"><span class="built_in">isdigit</span>(c)          <span class="comment">//当c是数字时为真</span></span><br><span class="line"><span class="built_in">isgraph</span>(c)          <span class="comment">//当c不是空格但可以打印时为真</span></span><br><span class="line"><span class="built_in">islower</span>(c)          <span class="comment">//当c是小写字母时为真</span></span><br><span class="line"><span class="built_in">isprint</span>(c)          <span class="comment">//当c是可打印字符时为真（即c是空格或c具有可视形式）</span></span><br><span class="line"><span class="built_in">ispunct</span>(c)          <span class="comment">//当c是标点符号时为真  </span></span><br><span class="line"><span class="built_in">isspace</span>(c)          <span class="comment">//当c是空白时为真（即c是空格、横向制表符、纵向制表符、回车符、换行符、进纸符中的一种）</span></span><br><span class="line"><span class="built_in">isupper</span>(c)          <span class="comment">//当c是大写字母时为真</span></span><br><span class="line"><span class="built_in">isxdigit</span>(c)         <span class="comment">//当c是十六进制数字时为真</span></span><br><span class="line"><span class="built_in">tolower</span>(c)          <span class="comment">//如果c是大写字母，输出对应的小写字母</span></span><br><span class="line"><span class="built_in">toupper</span>(c)          <span class="comment">//如果c是小写字母，输出对应的大写字母</span></span><br></pre></td></tr></table></figure></li><li><p>使用<strong>范围for</strong>(range for)语句处理每个字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (declaration : expression)     <span class="comment">//范围for语句的语法形式</span></span><br><span class="line">     statement</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"Hello World!!!"</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c : s)                  <span class="comment">//c是引用，这样才能改变c</span></span><br><span class="line">    c = <span class="built_in">toupper</span>(c);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt;<span class="built_in">endl</span>;                 <span class="comment">//输出HELLO WORLD！！！</span></span><br></pre></td></tr></table></figure></li><li><p>使用下标运算符( [ ] )处理string对象中的单个字符，<u><strong>其接受的输入参数是string::size_type类型；返回值是该位置上字符的引用</strong></u>。</p></li></ul><h1 id="标准库vector"><a href="#标准库vector" class="headerlink" title="标准库vector"></a>标准库vector</h1><ul><li>标准库类型<strong>vector</strong>表示对象的集合，其中所有对象的类型都相同。它是一个<strong>类模板</strong>(class template)。</li><li>编译器根据模板创建类或者函数的过程称为<strong>实例化</strong>(instantiation)。</li></ul><h2 id="定义和初始化vector对象"><a href="#定义和初始化vector对象" class="headerlink" title="定义和初始化vector对象"></a>定义和初始化vector对象</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1;                       <span class="comment">//默认初始化，v1是一个空vector，它潜在的元素是T类型的</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2(v1);                   <span class="comment">//拷贝初始化，v2中包含v1所有元素的副本</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2 = v1;                  <span class="comment">//拷贝初始化，等价于v2(v1)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v3(n, val);               <span class="comment">//v3包含了n个重复元素，每个元素的值都是val</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v3&#123;n, val&#125;                 <span class="comment">//如果提供的值无法用来列表初始化，则同上。例如vector&lt;string&gt;&#123;10,"hi"&#125;;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v4(n);                    <span class="comment">//值初始化，v4包含了n个重复地执行了值初始化地对象，T为int则每个值为0，T为string则每                                     //个值为空string对象</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v5&#123;a,b,c...&#125;;             <span class="comment">//列表初始化，v5包含了初始值个数地元素，每个元素被赋予相应地初始c值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v5=&#123;a,b,c...&#125;;            <span class="comment">//列表初始化，等价于v5&#123;a,b,c...&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>值初始化(value-initialized)</strong>：顾名思义，就是用数值初始化变量。如果没有给定一个初始值，就会根据变量或类对象的类型提供一个初始值。对于int类型其值初始化后的值为0。对于这种初始化的方式有两个特殊限制：<ul><li>其一，有些类要求必须明确地提供初始值。对这种类型的对象来说，只提供元素的数量而不设定初始值无法完成初始化工作。</li><li>其二，如果只提供了元素的数量而没有设定初始值，只能使用直接初始化。</li></ul></li></ul><h2 id="vector支持的操作"><a href="#vector支持的操作" class="headerlink" title="vector支持的操作"></a>vector支持的操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v.empty();                          </span><br><span class="line">v.size();&#x2F;&#x2F;其返回类型是vector::size_type</span><br><span class="line">v.push_back(t);</span><br><span class="line">v[n];</span><br><span class="line">v1 &#x3D; v2;</span><br><span class="line">v1 &#x3D; &#123;a,b,c...&#125;</span><br></pre></td></tr></table></figure><h1 id="迭代器介绍-iterator"><a href="#迭代器介绍-iterator" class="headerlink" title="迭代器介绍(iterator)"></a>迭代器介绍(iterator)</h1><ul><li>迭代器的对象是容器中的元素或者string对象中的字符。</li><li>使用迭代器可以访问某个元素，迭代器也能从一个元素移动到另一个元素。</li><li>有效的迭代器指向某个元素，或者只想容器中尾元素的下一个位置。</li></ul><h2 id="使用迭代器"><a href="#使用迭代器" class="headerlink" title="使用迭代器"></a>使用迭代器</h2><ul><li><p>有迭代器的类型同时拥有返回迭代器的成员。比如<strong>begin</strong>和<strong>end</strong>成员。</p></li><li><p>begin成员返回指向第一个元素的迭代器，end成员返回指向容器“尾元素的下一个位置（one past the end）”的迭代器，该迭代器指示的是容器的一个本不存在的“<strong>尾后</strong>（off the end）”元素。</p></li><li><p>标准容器迭代器的运算符：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*iter;                                      <span class="comment">//返回迭代器iter所知元素的引用</span></span><br><span class="line">iter-&gt;mem;                                  <span class="comment">//解引用iter并获得该元素名为mem的成员，等价于(*iter).mem</span></span><br><span class="line">++iter;                                     <span class="comment">//令iter指示容器中的下一个元素</span></span><br><span class="line">--iter;                                     <span class="comment">//令iter指示容器中的上一个元素</span></span><br><span class="line">iter1 == iter2;                             <span class="comment">//判断两个迭代器是否相等（不相等），如果两个迭代器指示的是同一个元素或者</span></span><br><span class="line">iter1 != iter2;                             <span class="comment">//它们是同一个容器的尾后迭代器，则相等，反之则不等</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="迭代器运算"><a href="#迭代器运算" class="headerlink" title="迭代器运算"></a>迭代器运算</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iter + n;</span><br><span class="line">iter - n;</span><br><span class="line">iter += n;</span><br><span class="line">iter -=n;</span><br><span class="line">iter1 - iter2;</span><br></pre></td></tr></table></figure><ul><li><u>iter1-iter2的返回值类型是<strong>difference_type</strong>的带符号型整数</u>。</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="定义和初始化内置数组"><a href="#定义和初始化内置数组" class="headerlink" title="定义和初始化内置数组"></a>定义和初始化内置数组</h2><ul><li><p>数组是一种<strong>复合类型</strong>。</p></li><li><p>数组的声明形如a[b]，a是数组的名字，b是数组的维度。</p></li><li><p>维度必须是一个常量表达式。</p></li><li><p>默认情况下，数组的元素被默认初始化。<u>和内置类型的变量一样，在函数内部定义的某种内置数据类型的数组，默认初始化会令数组有未定义的值。</u></p></li><li><p>不能将数组的内容拷贝给其他数组或为其他数组赋值。</p></li><li><p>字符数组的特殊性：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a1[] = &#123;<span class="string">'C'</span>,<span class="string">'+'</span>,<span class="string">'+'</span>&#125;;               <span class="comment">//列表初始化，没有空字符</span></span><br><span class="line"><span class="keyword">char</span> a2[] = &#123;<span class="string">'C'</span>,<span class="string">'+'</span>,<span class="string">'+'</span>,<span class="string">'\0'</span>&#125;;          <span class="comment">//列表初始化，含有显示的空字符</span></span><br><span class="line"><span class="keyword">char</span> a3[] = <span class="string">"C++"</span>;                       <span class="comment">//自动添加表示字符串结束的空字符</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> a4[<span class="number">6</span>] = <span class="string">"Daniel"</span>;             <span class="comment">//错误：没有空间可以存放空字符</span></span><br></pre></td></tr></table></figure></li><li><p>复杂的数组声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptrs[<span class="number">10</span>];                          <span class="comment">//ptrs是含有10个整形指针的数组；</span></span><br><span class="line"><span class="keyword">int</span> &amp;refs[<span class="number">10</span>] = ...                     <span class="comment">//错误，引用不是对象，不存在引用的数组</span></span><br><span class="line"><span class="keyword">int</span> (*parray)[<span class="number">10</span>] = &amp;arr;               <span class="comment">//parray指向一个含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr;                <span class="comment">//arrRef引用一个含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> *(&amp;arry)[<span class="number">10</span>] = ptrs;                <span class="comment">//arry是数组的引用，该数组含有10个整形指针</span></span><br></pre></td></tr></table></figure></li><li><p><u>数组下标的类型是<strong>size_t</strong>,它是一种机器相关的无符号类型，被设计得足够大以便能表示内存中任意对象的大小</u><u>。在cstddef头文件中定义了size_t类型。</u></p></li></ul><h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><ul><li><p><u>在很多用到数组名字的地方，编译器都会自动地将其替换为一个指向数组首元素的指针。</u></p><p><code>string nums[] = {...};</code></p><p><code>string *ptr = nums; //等价于ptr = &amp;nums[0];</code></p></li><li><p><u>在大多数表达式中，使用数组类型的对象其实是使用一个指向该数组首元素的指针。</u></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">ia2</span><span class="params">(ia)</span></span>;   <span class="comment">//ia2是一个整型指针，指向ia的第一个元素</span></span><br><span class="line"><span class="keyword">decltype</span>(ia) ia3 =&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;   <span class="comment">//ia3是一个含有10个整数的数组</span></span><br></pre></td></tr></table></figure></li><li><p><strong>指针也是迭代器</strong>：就像使用迭代器遍历vector对象中的元素一样，使用指针也能遍历数组中的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p=arr;                           <span class="comment">//p指向arr的第一个元素；</span></span><br><span class="line">++p;                                  <span class="comment">//p指向arr[1];</span></span><br><span class="line"><span class="keyword">int</span> *e = &amp;arr[<span class="number">10</span>];                    <span class="comment">//e指向arr尾元素的下一位置</span></span><br><span class="line"><span class="keyword">int</span> *beg = <span class="built_in">begin</span>(arr);                <span class="comment">//beg指向arr的首元素</span></span><br><span class="line"><span class="keyword">int</span> *last = <span class="built_in">end</span>(arr);                 <span class="comment">//last指向arr尾元素的下一个位置</span></span><br></pre></td></tr></table></figure></li><li><p><u>两个指针相减的结果的类型是一种名为<strong>ptrdiff_t</strong>的标准库类型，定义在<strong>cstddef</strong>头文件中的机器相关的类型，是一种带符号类型。</u></p></li><li><p>下标和指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i =ia[<span class="number">2</span>];            <span class="comment">//ia转换成指向数组首元素的指针，ia[2]得到(ia+2)所指的元素;</span></span><br><span class="line"><span class="keyword">int</span> *p = ia;             <span class="comment">//p指向ia的首元素；</span></span><br><span class="line">i = *(p + <span class="number">2</span>);            <span class="comment">//i = ia[2];</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;ia[<span class="number">2</span>];         <span class="comment">//p指向索引为2的元素；</span></span><br><span class="line"><span class="keyword">int</span> j = p[<span class="number">1</span>];            <span class="comment">//p[1]等价于*(p+1),就是ia[3]所表示的元素；</span></span><br><span class="line"><span class="keyword">int</span> k = p[<span class="number">-2</span>];           <span class="comment">//p[-2]是ia[0]表示的元素；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>] = ia;       <span class="comment">//p指向含有4个整数的数组</span></span><br><span class="line">p = &amp;ia[<span class="number">2</span>];             <span class="comment">//p指向ia的尾元素</span></span><br></pre></td></tr></table></figure></li><li><p><u>内置的下标运算符所用的索引值不是无符号类型，这一点与vector和string不一样。</u></p></li><li><p>使用数组初始化vector对象：<code>vector&lt;int&gt; ivec(begin(arr),end(arr));</code></p></li></ul><h2 id="C风格字符串"><a href="#C风格字符串" class="headerlink" title="C风格字符串"></a>C风格字符串</h2><ul><li><p>C风格字符串的函数（定义在cstring头文件中），传入此类函数的指针必须指向以空字符作为结束的数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(p);                       <span class="comment">//返回p的长度，空字符不计算在内</span></span><br><span class="line"><span class="built_in">strcmp</span>(p1, p2);                  <span class="comment">//比较p1和p2的相等性。如果p1==p2，返回0；如果p1&gt;p2,返回正值；p1&lt;p2,返回负值</span></span><br><span class="line"><span class="built_in">strcat</span>(p1, p2);                  <span class="comment">//将p2附加到p1之后，返回p1</span></span><br><span class="line"><span class="built_in">strcpy</span>(p1, p2);                  <span class="comment">//将p2拷贝给p1，返回p1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 《c++primer》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《c++primer》第二章 变量和基本类型</title>
      <link href="2020/10/13/20202013-%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/10/13/20202013-%E3%80%8Ac++primer%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="内置基本类型"><a href="#内置基本类型" class="headerlink" title="内置基本类型"></a>内置基本类型</h1><h2 id="算术类型-arithmetic-type"><a href="#算术类型-arithmetic-type" class="headerlink" title="算术类型(arithmetic type)"></a>算术类型(arithmetic type)</h2><ul><li><p>算术类型分为两类：整型(integral type,包括字符和布尔类型在内)和浮点型。</p></li><li><p>算术类型的尺寸在不同机器上有所差别，下表列出了C++标准规定的尺寸的最小值，同时允许编译器赋予这些类型更大的尺寸</p><a id="more"></a></li></ul><table><thead><tr><th>类型</th><th>含义</th><th>最小尺寸</th></tr></thead><tbody><tr><td>bool</td><td>布尔类型</td><td>未定义</td></tr><tr><td>char</td><td>字符</td><td>8位</td></tr><tr><td>wchar_t</td><td>宽字符</td><td>16位</td></tr><tr><td>char16_t</td><td>Unicode字符</td><td>16位</td></tr><tr><td>char32_t</td><td>Unicode字符</td><td>32位</td></tr><tr><td>short</td><td>短整型</td><td>16位</td></tr><tr><td>int</td><td>整型</td><td>16位</td></tr><tr><td>long</td><td>长整型</td><td>32位</td></tr><tr><td>long long</td><td>长整型</td><td>64位</td></tr><tr><td>float</td><td>单精度浮点数</td><td>6位有效数字</td></tr><tr><td>double</td><td>双精度浮点数</td><td>10位有效数字</td></tr><tr><td>long double</td><td>扩展精度浮点数</td><td>10位有线数字</td></tr></tbody></table><ul><li><ul><li>除去布尔型和扩展的字符型之外，其他整型可以划分为带符号的(signed)和无符号的(unsigned)。类型int、short、long和long long都是带符号的，在前面加上unsigned就能得到无符号类型。<u>类型unsigned int可以缩写为unsigned。</u></li><li>与其他整型不同，字符型被分成了三种：char、signed char、和unsigned char。char与signed char不同。char实际上会表现为带符号或不带符号的，具体哪种由编译器决定。</li></ul></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>当在程序的某处我们使用了一种类型二对象应该取另一种类型的时，程序会自动进行类型转换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> b = <span class="number">42</span>;   <span class="comment">//b为真  </span></span><br><span class="line"><span class="keyword">int</span> i = b;   <span class="comment">//i为1</span></span><br><span class="line">i = <span class="number">3.14</span>;   <span class="comment">//i为3</span></span><br><span class="line"><span class="keyword">double</span> pi = i;   <span class="comment">//pi为3.0</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="number">-1</span>;   <span class="comment">//假设char为8 bit，c的255</span></span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span> c2 = <span class="number">256</span>;   <span class="comment">//假设char为8 bit，c2的值是未定义的</span></span><br><span class="line"><span class="keyword">unsigned</span> u = <span class="number">10</span>; i = <span class="number">-42</span>; <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;u+i;   <span class="comment">//如果i为32位，输出4294967264</span></span><br></pre></td></tr></table></figure><ul><li>当我们赋给带符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。</li><li>当我们赋给带符号类型一个超出它范围的值时，结果是<strong>未定义的</strong>(undefined)。此时，程序可能继续工作、可能崩溃，也可能生成垃圾数据。</li></ul><h2 id="字面值常量-literal"><a href="#字面值常量-literal" class="headerlink" title="字面值常量(literal)"></a>字面值常量(literal)</h2><ul><li>一个形如 42 的值被称为==字面值常量==(literal)，这样的值一望而知。</li><li>每个字面值常量都对应一种数据类型，字面值常量的形式和值决定了它的数据类型。</li></ul><h3 id="整型和浮点型字面值"><a href="#整型和浮点型字面值" class="headerlink" title="整型和浮点型字面值"></a>整型和浮点型字面值</h3><ul><li>我们可以将整型字面值写作十进制数、八进制数或十六进制数的形式。以0开头的整数代表八进制，以0x或0X开头的代表十六进制。</li><li>默认情况下，十进制字面值是带符号数，八进制和十六进制字面值极可能是带符号也可能是无符号的。</li><li>十进制字面值的类型是int、long和long long中尺寸最小的那个，八进制和十六进制字面值的类型是int、unsigned int、long、unsigned long、long long、unsigned long long中的尺寸最小者。</li><li><u>类型short没有对应的字面值。</u></li><li><u>严格来说，</u><u>十进制字面值不会是负数，负号并不在字面值之内，它的作用仅仅是对字面值取负值而已。</u></li><li>浮点型字面值表现为一个小数或以科学计数法表示的指数，其中指数部分用E或e表示。默认为double。</li></ul><h3 id="字符和字符串字面值"><a href="#字符和字符串字面值" class="headerlink" title="字符和字符串字面值"></a>字符和字符串字面值</h3><ul><li>由单引号括起来的一个字符为char型字面值，双引号括起来的零个或多个字符则构成字符串字面值。</li><li>编译器在每个字符串的结尾处添加一个空字符(‘\0’)，因此<u>字符串字面值的实际长度要比它的内容多1。</u></li></ul><h3 id="转义序列-escape-sequence"><a href="#转义序列-escape-sequence" class="headerlink" title="转义序列(escape sequence)"></a>转义序列(escape sequence)</h3><p>  有两类字符程序员不能直接使用：一类是<strong>不可打印</strong>(nonprintable)的字符，如退格或其他控制字符，因为它们没有可视的图符；另一类是在C++中有特殊含义的字符(单引号、双引号、问号、反斜线)。在这些情况下需要用到<strong>转义序列</strong>，转义序列均以反斜线开始，C++规定的转义序列包括：</p><p> <code>换行符   \n</code>    <code>横向制表符   \t</code>    <code>报警（响铃）符   \a</code>    <code>纵向制表符   \v</code>    <code>退格符   \b</code>    <code>双引号   \&quot;</code><br><code>反斜线   \\</code>    <code>问号   \?</code>    <code>单引号   \&#39;</code>    <code>回车符   \r</code>    <code>进纸符   \f</code></p><ul><li>在程序中，上述转义字符被当作一个字符使用。</li><li>我们也可以使用泛化的转义序列，其形式是\x后紧跟1个或多个十六进制数字，或\后紧跟1个、2个或3个八进制数字，其中数字部分表示的是字符对应的数值。</li><li>注意，如果反斜线\后面紧跟着的八进制数超过3个，只有前3个构成转义序列。相反，\x要用到后面紧跟着的所有数字。因为大多数机器的char型数据占8bit，所以超过八位的十六进制字符都是与前缀作为开头的扩展字符集一起使用。</li></ul><h3 id="指定字面值的类型"><a href="#指定字面值的类型" class="headerlink" title="指定字面值的类型"></a>指定字面值的类型</h3><p>通过添加下表中所列的前缀和后缀，可以改变整型、浮点型和字符型字面值的默认类型。</p><ul><li>字符和字符串字面值</li></ul><table><thead><tr><th>前缀</th><th>含义</th><th>类型</th></tr></thead><tbody><tr><td>u</td><td>Unicode16字符</td><td>char16_t</td></tr><tr><td>U</td><td>Unicode32字符</td><td>char32_t</td></tr><tr><td>L</td><td>宽字符</td><td>wchar_t</td></tr><tr><td>u8</td><td>UTF-8（仅用于字符串字面值常量）</td><td>char</td></tr></tbody></table><ul><li>整型和浮点型字面值</li></ul><table><thead><tr><th>后缀</th><th>最小匹配类型/类型</th></tr></thead><tbody><tr><td>u or U</td><td>unsigned</td></tr><tr><td>l or L</td><td>long</td></tr><tr><td>ll or LL</td><td>long long</td></tr><tr><td>f or F</td><td>float</td></tr><tr><td>l or L</td><td>long double</td></tr></tbody></table><p>对于一个整形字面值，我们可以将u与L或LL合在一起使用。</p><h3 id="布尔字面值和指针字面值"><a href="#布尔字面值和指针字面值" class="headerlink" title="布尔字面值和指针字面值"></a>布尔字面值和指针字面值</h3><ul><li>true和false是布尔类型的字面值。</li><li>nullptr是指针字面值。</li></ul><h1 id="变量-variable"><a href="#变量-variable" class="headerlink" title="变量(variable)"></a>变量(variable)</h1><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><ul><li><p>变量定义的基本形式是：首先是<strong>类型说明符</strong>(type specifier)，随后紧跟有一个或多个变量名组成的列表，其中变量名以逗号结束，最后以分号结束。</p></li><li><p>当对象在创建时获得了一个特定的值，我们说这个对象被<strong>初始化</strong>(initialized)了。用于初始化变量的值可以是任意复杂的表达式。</p></li><li><p>在C++中，初始化和赋值是两个完全不同的操作。<u>初始化的含义是创造变量时赋予其一个初始值，而</u><u>赋值的含义是把对象的当前值擦除，而以一个新值代替</u>。</p></li><li><p><u>C++语言定义了初始化的好几种不同形式</u>，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = &#123;<span class="number">0</span>&#125;；</span><br><span class="line"><span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;；</span><br><span class="line"><span class="keyword">int</span> a(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>作为C++11新标准的一部分，用花括号来初始化变量得到了全面应用，这种形式被称为<strong>列表初始化</strong>(list initialization)。无论是初始化对象还是某些时候为对象赋新值，都可以使用列表初始化。当用于内置类型的变量时，这种初始化有个重要特点：如果我们使用列表初始化且初始值存在丢失信息的风险，则编译器将报错。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ld = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">int</span> a&#123;ld&#125;, b = &#123;ld&#125;;   <span class="comment">//错误，转换未执行，因为存在丢失信息的风险</span></span><br><span class="line">int c(ld), d = ld;     //正确</span><br></pre></td></tr></table></figure></li><li><p>如果定义变量时没有指定初值，则变量被<strong>默认初始化</strong>(default initializated),此时变量被赋予了“默认值”，默认值是什么由变量类型决定，也和定义变量的位置有关。</p><ul><li>如果是内置类型的变量未被显示初始化，它的值由定义的位置决定。定义于任何函数体之外的变量被初始化为0。</li><li>一种例外情况是，定义在函数体内部的内置类型将<strong>不被初始化</strong>(uninitializated)。</li><li>一个未被初始化的内置类型变量的值是未定义的，如果试图拷贝或以其他形式访问此类值将引发错误。</li><li>类的对象如果没有被显示地初始化，则其值由类决定。</li></ul></li></ul><h2 id="变量声明和定义的关系"><a href="#变量声明和定义的关系" class="headerlink" title="变量声明和定义的关系"></a>变量声明和定义的关系</h2><ul><li><p>为了支持分离式编译(separate compilation)，C++将声明和定义区分开。<strong>声明</strong>(declaration)使得名字为程序所知，一个文件如果想使用别处定义的名字则必须包含对那个名字的声明。而<strong>定义</strong>(definition)负责创建与名字关联的实体。</p></li><li><p>变量声明规定了变量的类型和名字，在这一点上定义与之相同。除此之外，定义还申请储存空间，也可能为变量赋一个初始值。如果想声明一个变量而非定义它，就在变量前加上关键字<strong>extern</strong>，而且不要显示地初始化变量。<u>在函数体内部，如果试图初始化一个由extern关键字标记的变量，将引发错误。</u></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> j;<span class="comment">//声明j而非定义j</span></span><br><span class="line"><span class="keyword">int</span> j;       <span class="comment">//定义而非声明j</span></span><br><span class="line"><span class="keyword">int</span> j =<span class="number">10</span>;   <span class="comment">//定义并且初始化j</span></span><br></pre></td></tr></table></figure></li><li><p>==变量能且只能被定义一次，但可以多次声明。==</p></li></ul><h2 id="标识符-identifier"><a href="#标识符-identifier" class="headerlink" title="标识符(identifier)"></a>标识符(identifier)</h2><ul><li>C++标识符由字母、数字和下划线组成，其中必须以字母或下划线开头。</li><li>用户自定义地标识符不能连续出现两个下划线，也不能以下划线紧连大写字母开头。</li><li>定义在函数体外的标识符不能以下划线开头。</li></ul><h2 id="名字的作用域"><a href="#名字的作用域" class="headerlink" title="名字的作用域"></a>名字的作用域</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> reused = <span class="number">42</span>; <span class="comment">//reused有全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> unique = <span class="number">0</span>; <span class="comment">//unique拥有块作用域</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; reused &lt;&lt; <span class="string">" "</span> &lt;&lt; unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">// 输出：42 0</span></span><br><span class="line">  <span class="keyword">int</span> reused=<span class="number">0</span>;<span class="comment">//新建局部变量reused，覆盖了局部变量reused</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; reused &lt;&lt; <span class="string">" "</span> &lt;&lt; unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">// 输出：0 0</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ：：reused &lt;&lt; <span class="string">" "</span> &lt;&lt; unique &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">// 输出：42 0</span></span><br><span class="line">  <span class="comment">//全局作用域没有名字，当作用域操作符左侧为空时，向全局作用域发出请求获取作用域操作符右侧名字对应的变量。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复合类型-compound-type"><a href="#复合类型-compound-type" class="headerlink" title="复合类型(compound type)"></a>复合类型(compound type)</h1><p>变量的定义包括一个<strong>基本数据类型</strong>(base type)和一组<strong>声明符</strong>(declarator)列表，变量名也是声明符。复合类型是指基于其他类型定义的类型。本章将介绍其中两种：引用和指针。</p><h2 id="引用-reference"><a href="#引用-reference" class="headerlink" title="引用(reference)"></a>引用(reference)</h2><ul><li>引用为对象起了另外一个名字，引用类型引用(refers to)另外一种类型。通过将声明符写成&amp;d的形式来定义引用类型。</li><li>引用必须被初始化。</li><li>定义引用时，<u>程序把引用和它的初始值<strong>绑定</strong>(bind)在一起，而不是将初始值拷贝给引用</u>。引用并非对象，只是一个已经存在的对象的别名。</li><li><u>引用的类型要和与之绑定的对象严格匹配</u>（有两种特殊情况）。</li><li><u>引用只能绑定在对象上，不能与字面值和计算结果绑定在一起</u>，也不能定义引用的引用。</li><li>严格来说，当我们使用术语“引用(reference)”时，指的其实是”左值引用(lvalue reference)”。</li></ul><h2 id="指针-pointer"><a href="#指针-pointer" class="headerlink" title="指针(pointer)"></a>指针(pointer)</h2><ul><li><p>指针本身就是一个对象，允许对指针复制和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象。</p></li><li><p><u>指针无需在定义时赋初值。</u>在块作用域定义的指针如果没有被初始化，将拥有一个不确定的值。</p></li><li><p>指针获取对象的地址</p><ul><li>指针存放某个对象的地址，需要用<strong>取地址符</strong>(操作符&amp;)。</li><li><u>除两种特例外，其他所有指针的类型都要和它所指向的对象严格匹配。</u></li></ul></li><li><p>指针的值（即地址）应属下列4种状态之一：</p><ol><li>指向一个对象。</li><li>指向紧邻对象所占空间的下一个位置。</li><li>空指针，意味着指针没有指向任何一个对象。</li><li>无效指针，也就是上述情况之外的其他值。</li></ol></li><li><p>如果指针指向一个对象，使用<strong>解引用符</strong>(操作符*)来访问对象。</p></li><li><p>空指针(null pointer)不指向任何对象。</p><p><code>int *p1 = nullptr;</code>   <code>int *p2 =0;  //不能将为0的变量直接赋给指针</code>    <code>int *p3 = NULL:   //需要首先#include cstdlib</code></p></li><li><p>一个指针指向某个对象，另一个指针指向另外对象的下一个地址，此时也有可能出现这两个指针相同的情况。</p></li><li><p><strong>void*</strong> 指针可以存放任意对象的地址。</p></li><li><p>指向指针的指针:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>; </span><br><span class="line"><span class="keyword">int</span> *pi = &amp;ival; </span><br><span class="line"><span class="keyword">int</span> **ppi = &amp;pi;</span><br></pre></td></tr></table></figure></li><li><p>指向指针的引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>; </span><br><span class="line"><span class="keyword">int</span> *p ; </span><br><span class="line"><span class="keyword">int</span> *&amp;r = p;  </span><br><span class="line">r = &amp;i; <span class="comment">//即 p = i</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h1><ul><li>只能在const类型的对象上执行不改变其内容的操作。</li><li>const对象必须初始化。</li><li><u>如果想在过个文件之间共享const对象，必须在变量的定义之前添加extern关键字。</u></li></ul><h2 id="const的引用"><a href="#const的引用" class="headerlink" title="const的引用"></a>const的引用</h2><ul><li><p>可以把引用绑定到const对象上，称之为<strong>对常量的引用</strong>(reference to const)。<u>对常量的引用不能被用作修改它所绑定的对象</u>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = ci;</span><br><span class="line">r1 = <span class="number">42</span>;   <span class="comment">//错误，r1是对常量的引用</span></span><br><span class="line"><span class="keyword">int</span> &amp;r2 = ci;   <span class="comment">//错误：试图让一个非常量引用指向一个常量对象</span></span><br></pre></td></tr></table></figure></li><li><p>在<u>初始化常量引用时允许用任意表达式作为初始值</u>，只要该表达式能转换成引用的类型。尤其，允许为一个常量引用绑定非常量对象、字面值甚至一般表达式。</p><ul><li><p>当一个常量引用被绑定到另一种类型上时：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = dval; <span class="comment">//编译器把这句代码变成了如下形式</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> temp = dval;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = temp;</span><br></pre></td></tr></table></figure><p>在这种情况下，ri绑定了一个<strong>临时量</strong>(temporary)对象，即当编译器需要一个空间来暂存表达式的求值结果时临时创建的一个未命名对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = i;   <span class="comment">//常量引用的对象可以是非常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 =<span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r3 =r2 * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;r4 = r2 * <span class="number">2</span>;   <span class="comment">//错误，r4是一个普通的非常量引用</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h2><ul><li><p><strong>指向常量的指针</strong>(pointer to const)</p><ul><li><p><code>const int *a = &amp;b;</code></p></li><li><p>不能用于改变其所指对象的值。<u>要想存放常量对象的地址，只能使用指向常量的指针。</u></p></li><li><p>允许令一个指向常量的指针指向一个非常量对象。</p></li></ul></li><li><p><strong>常量指针</strong>(const pointer)</p><ul><li><p><code>int *const a = b;</code></p></li><li><p>其本身是常量，必须初始化，且它的值（也就是指针所指的地址）不能改变。</p></li></ul></li></ul><h2 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h2><ul><li><p><strong>顶层const</strong>(top-level const)表示任意的对象是常量，对任何数据类型都适用。</p></li><li><p><strong>底层const</strong>(low-level const)表示指针所指的对象是一个常量，与指针和引用等复合类型的基本类型有关。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p1 = &amp;i;   <span class="comment">//顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">42</span>;   <span class="comment">//顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;ci;   <span class="comment">//底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3 = p2;   <span class="comment">//左边的是底层const，右边是顶层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = ci;   <span class="comment">//常量引用都是底层const</span></span><br></pre></td></tr></table></figure></li><li><p>拷贝操作时，<u>顶层const不受影响</u>。但是<u>拷入和拷出的对象必须有相同的底层const资格，或者两个对象的数据类型能转换。</u>一般来说，非常量可以转换成常量，反之则不行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = ci;   <span class="comment">//正确，ci是顶层const，无影响</span></span><br><span class="line">p2 = p3;   <span class="comment">//正确，p2和p3都有底层const，，p3的顶层const的部分不影响</span></span><br><span class="line"><span class="keyword">int</span> *p = p3;   <span class="comment">//错误，p3有底层const，p没有</span></span><br><span class="line">p2 = &amp;i;   <span class="comment">//正确，int*能转换成const int*</span></span><br><span class="line"><span class="keyword">int</span> &amp;r = ci;   <span class="comment">//错误，ci是底层const</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a>constexpr和常量表达式</h2><ul><li><p><strong>常量表达式</strong>(const expression)是指值不会改变并且在编译过程就能得到计算结果的表达式。<strong>字面值是常量表达式，用常量表达式初始化的const对象也是常量表达式。</strong></p></li><li><p>C++11新标准规定。允许将变量声明为<strong>constexpr</strong>类型以便编译器来验证变量的值是否是一个常量表达式。<strong><u>声明为constexpr的变量一定是常量，而且必须用常量表达式初始化。</u></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_file = <span class="number">20</span>;             <span class="comment">//max_file是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = max_file + <span class="number">1</span>;      <span class="comment">//limit是常量表达式</span></span><br><span class="line"><span class="keyword">int</span> staff_size = <span class="number">27</span>;                 <span class="comment">//staff_size不是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = get_size();           <span class="comment">//sz不是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> mf = <span class="number">20</span>;               <span class="comment">//20是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> limit = mf + <span class="number">1</span>;        <span class="comment">//mf+1是常量表达式</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> sz = szie();           <span class="comment">//只有当size是一个constexpr函数时，这才是一条正确的语句</span></span><br></pre></td></tr></table></figure></li><li><p><strong>字面值类型</strong>(literal type):常量表达式的值需要在编译时就得到计算，因此<u>对声明constexpr时所用到的类型必须为字面值类型</u>。==算术类型==、==引用==和==指针==等都属于字面值类型。</p></li><li><p><u>constexpr指针的初始值必须是nullptr或0，或者是储存于某个固定地址的对象</u>，如定义在函数体之外的对象，或局部静态变量。</p></li></ul><h1 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h1><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><ul><li><p><strong>类型别名</strong>(type alias)是一个名字它是某种类型的同义词。</p></li><li><p>有两种方法可以定义类型别名</p><ul><li>使用关键字<strong>typedef</strong>，<code>typedef double wages   //wages是double的同义词</code></li><li>使用<strong>别名声明</strong>(alias declaration),用关键字using，<code>using wages = double</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *pstring;</span><br><span class="line"><span class="keyword">const</span> pstring cstr = <span class="number">0</span>;   <span class="comment">//cstr是指向char的常量指针，而不是const char *cstr（指向char常量的指针）</span></span><br><span class="line"><span class="keyword">const</span> pstring *ps；   <span class="comment">//ps是一个指针，它的对象是指向char的常量指针</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="auto类型说明符"><a href="#auto类型说明符" class="headerlink" title="auto类型说明符"></a>auto类型说明符</h2><ul><li><p>auto让编译器通过初始值来推算变量的类型，所以必须有初始值。</p></li><li><p>若引用被作为初始值，auto的类型为引用对象的类型。</p></li><li><p><u>auto一般会忽略顶层const，保留底层const。</u>如果希望auto是顶层const，应在前面加上const。</p></li><li><p>要在一条语句中定义多个变量，初始值必须是同一种类型。</p><p><code>int i=0; const int j =1; auto &amp;n = i, *p = &amp;j; //错误，i和j类型不同</code></p></li></ul><h2 id="decltype类型指示符"><a href="#decltype类型指示符" class="headerlink" title="decltype类型指示符"></a>decltype类型指示符</h2><ul><li><p>decltype：选择并返回操作数的数据类型。在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。</p><p><code>decltype( f() ) sum = x;   //sum的类型就是函数f的返回类型，编译器不实际调用函数f</code></p></li><li><p>如果decltype使用的表达式是一个变量，则decltype返回该变量的类型（包括顶层const和引用在内）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>, *p = &amp;i, &amp;r = i;</span><br><span class="line"><span class="keyword">decltype</span>(r+<span class="number">0</span>) b;   <span class="comment">//正确：b是一个int</span></span><br><span class="line"><span class="keyword">decltype</span>(*p) c;   <span class="comment">//错误：解引用的结果是一个引用，c是一个int&amp;，必须初始化</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) d;   <span class="comment">//错误：d是一个int&amp;，必须初始化</span></span><br></pre></td></tr></table></figure></li><li><p>decltype((variable))的结果永远是引用。因为给变量加了一层或多层括号，编译器会把它当成是一个表达式。变量是一种可以作为赋值语句左值的特殊表达式，所以这样的decltype就会得到引用类型。</p></li></ul><h1 id="预处理器概述"><a href="#预处理器概述" class="headerlink" title="预处理器概述"></a>预处理器概述</h1><ul><li><p><strong>预处理器</strong>(preprocessor)是在编译之前执行的一段程序，可以部分改变我们所写的程序。</p></li><li><p><strong>头文件保护符</strong>(header guard)依赖预处理变量。预处理变量有两种状态：已定义和未定义。</p><ul><li><p><strong>#define</strong>指令把一个名字设定为预处理变量。</p></li><li><p><strong>#ifdef</strong>当且仅当变量已定义时为真，<strong>#ifndef</strong>当且仅当变量未定义时为真。一旦检查结果为真，则执行后续操作直到遇到<strong>#endif</strong>指令为止。</p></li><li><p>使用这些功能就能有效防止重复包含的发生：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SALE_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SALE_DATA_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sale_data</span> &#123;</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">  <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">double</span> revenue =<span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 《c++primer》 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
